{
  "openapi": "3.0.3",
  "info": {
    "title": "FortiOT Management Server API",
    "description": "This is a draft version of OT Management Server API.",
    "version": "0.1.0"
  },
  "servers": [
    {
      "url": "https://dev-mock-domain.forticloud.com"
    }
  ],
  "tags": [
    {
      "name": "Agent",
      "description": "The agent communicates with the controller through the following APIs"
    },
    {
      "name": "Agents",
      "description": "Operations about agents"
    },
    {
      "name": "Agent Groups",
      "description": "Operations about agent groups"
    },
    {
      "name": "Agent Installers",
      "description": "Operations about agent installer"
    },
    {
      "name": "Authentication",
      "description": "Operations about authentication"
    },
    {
      "name": "Events",
      "description": "Operations about events"
    },
    {
      "name": "Licensing",
      "description": "Operations about Licensing"
    },
    {
      "name": "Logs",
      "description": "Operations about logs (log forwarding profiles & log servers)"
    },
    {
      "name": "Policies",
      "description": "Operations about policies"
    },
    {
      "name": "Securities",
      "description": "Operations about securities"
    },
    {
      "name": "Systems",
      "description": "Operations about systems"
    },
    {
      "name": "Users",
      "description": "Operations about users"
    }
  ],
  "paths": {
    "/licensing": {
      "get": {
        "tags": [
          "Licensing"
        ],
        "summary": "get-licensing-information",
        "description": "Get System Licensing",
        "operationId": "get-system-licensing",
        "parameters": [
          {
            "name": "organization",
            "in": "query",
            "description": "Specifies the organization. The value that you specify for this parameter indicates how the operation applies to an organization(s). Some parts of the Fortinet system have separate, non-shared data that is organization-specific. Other parts of the system have data that is shared by all organizations. The value that you specify for the organization parameter, as described below, determines to which organization(s) an operation applies:\n* Exact organization name – Specifies the name of a specific organization. The value that you specify here must match exactly.\n* All organizations – Indicates that the operation applies to all organizations. In this case, the same data is shared by all organizations.\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "addLicenseBlob",
            "in": "query",
            "description": "Indicates whether to put license blob to response. By default\naddLicenseBlob is false",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetLicensingResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Licensing"
        ],
        "summary": "upload-license",
        "description": "Upload license to the system",
        "operationId": "upload-license",
        "requestBody": {
          "description": "license",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateLicenseRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          },
          "201": {
            "description": "Created",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "license"
      }
    },
    "/policies/execution-prevention": {
      "post": {
        "tags": [
          "Policies"
        ],
        "summary": "create-an-execution-prevention-policy",
        "description": "create an execution prevention policy",
        "operationId": "create_an_execution_prevention_policy",
        "requestBody": {
          "description": "PostExecutionPreventionPolicyRequest",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostExecutionPreventionPolicyRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PostExecutionPreventionPolicyResponse"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "Policies"
        ],
        "summary": "delete-execution-prevention-policies",
        "description": "This API call deletes execution prevention policies",
        "operationId": "delete_execution_prevention_policies",
        "parameters": [
          {
            "name": "policyIds",
            "in": "query",
            "description": "Specifies the list of policy ids",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          },
          "204": {
            "description": "No Content",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          }
        }
      },
      "get": {
        "tags": [
          "Policies"
        ],
        "summary": "list-execution-prevention-policies",
        "description": "List execution prevention policies",
        "operationId": "list_execution_prevention_policies",
        "parameters": [
          {
            "name": "searchText",
            "in": "query",
            "description": "The free text search string.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "An integer used for paging that indicates the required start index",
            "schema": {
              "minimum": 0,
              "exclusiveMinimum": false,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "endIndex",
            "in": "query",
            "description": "An integer used for paging that indicates the required end index",
            "schema": {
              "minimum": 0,
              "exclusiveMinimum": false,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "policyIds",
            "in": "query",
            "description": "Specifies the list of policy ids",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "organization",
            "in": "query",
            "description": "Specifies the organization. The value that you specify for this parameter indicates how the operation applies to an organization(s). Some parts of the Fortinet system have separate, non-shared data that is organization-specific. Other parts of the system have data that is shared by all organizations. The value that you specify for the organization parameter, as described below, determines to which organization(s) an operation applies:\n* Exact organization name – Specifies the name of a specific organization. The value that you specify here must match exactly.\n* All organizations – Indicates that the operation applies to all organizations. In this case, the same data is shared by all organizations.\n",
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetExecutionPreventionPoliciesResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        }
      }
    },
    "/policies/execution-prevention/{Id}": {
      "get": {
        "tags": [
          "Policies"
        ],
        "summary": "get-an-execution-prevention-policy",
        "description": "Get an execution prevention policy",
        "operationId": "get_an_execution_prevention_policy",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Policy id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetExecutionPreventionPoliciesResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Policies"
        ],
        "summary": "update-an-execution-prevention-policy",
        "description": "Update an execution prevention policy",
        "operationId": "update_an_execution_prevention_policy",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Policy id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "PutExecutionPreventionPoliciesRequest",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PutExecutionPreventionPoliciesRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          },
          "201": {
            "description": "Created",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        }
      }
    },
    "/policies/exfiltration-prevention": {
      "post": {
        "tags": [
          "Policies"
        ],
        "summary": "create-an-exfiltration-prevention-policy",
        "description": "create an exfiltration prevention policy",
        "operationId": "create_an_exfiltration_prevention_policy",
        "requestBody": {
          "description": "PostExfiltrationPreventionPoliciesRequest",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostExfiltrationPreventionPolicyRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PostExfiltrationPreventionPolicyResponse"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "Policies"
        ],
        "summary": "delete-exfiltration-prevention-policies",
        "description": "This API call deletes exfiltration prevention policies",
        "operationId": "delete_exfiltration_prevention_policies",
        "parameters": [
          {
            "name": "policyIds",
            "in": "query",
            "description": "Specifies the list of policy ids",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          },
          "204": {
            "description": "No Content",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          }
        }
      },
      "get": {
        "tags": [
          "Policies"
        ],
        "summary": "list-exfiltration-prevention-policies",
        "description": "List exfiltration prevention policies",
        "operationId": "list_exfiltration_prevention_policies",
        "parameters": [
          {
            "name": "searchText",
            "in": "query",
            "description": "The free text search string.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "An integer used for paging that indicates the required start index",
            "schema": {
              "minimum": 0,
              "exclusiveMinimum": false,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "endIndex",
            "in": "query",
            "description": "An integer used for paging that indicates the required end index",
            "schema": {
              "minimum": 0,
              "exclusiveMinimum": false,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "policyIds",
            "in": "query",
            "description": "Specifies the list of policy ids",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": ""
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        }
      }
    },
    "/policies/exfiltration-prevention/{Id}": {
      "get": {
        "tags": [
          "Policies"
        ],
        "summary": "get-an-exfiltration-prevention-policy",
        "description": "Get an exfiltration prevention policy",
        "operationId": "get_an_exfiltration_prevention_policy",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Policy id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetExfiltrationPreventionPoliciesResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Policies"
        ],
        "summary": "update-an-exfiltration-prevention-policy",
        "description": "Update an exfiltration prevention policy",
        "operationId": "update_an_exfiltration_prevention_policy",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Policy id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "PutExfiltrationPreventionPoliciesRequest",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PutExfiltrationPreventionPoliciesRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          },
          "201": {
            "description": "Created",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        }
      }
    },
    "/policies/ransomware-prevention": {
      "post": {
        "tags": [
          "Policies"
        ],
        "summary": "create-a-ransomware-prevention-policy",
        "description": "create a ransomware prevention policy",
        "operationId": "create_a_ransomware_prevention_policy",
        "requestBody": {
          "description": "PostRansomwarePreventionPolicyRequest",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostRansomwarePreventionPolicyRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PostRansomwarePreventionPolicyResponse"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "Policies"
        ],
        "summary": "delete-ransomware-prevention-policies",
        "description": "This API call deletes ransomware prevention policies",
        "operationId": "delete_ransomware_prevention_policies",
        "parameters": [
          {
            "name": "policyIds",
            "in": "query",
            "description": "Specifies the list of policy ids",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          },
          "204": {
            "description": "No Content",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          }
        }
      },
      "get": {
        "tags": [
          "Policies"
        ],
        "summary": "list-ransomware-prevention-policies",
        "description": "List ransomware prevention policies",
        "operationId": "list_ransomware_prevention_policies",
        "parameters": [
          {
            "name": "searchText",
            "in": "query",
            "description": "The free text search string.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "An integer used for paging that indicates the required start index",
            "schema": {
              "minimum": 0,
              "exclusiveMinimum": false,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "endIndex",
            "in": "query",
            "description": "An integer used for paging that indicates the required end index",
            "schema": {
              "minimum": 0,
              "exclusiveMinimum": false,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "policyIds",
            "in": "query",
            "description": "Specifies the list of policy ids",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetRansomwarePreventionPoliciesResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        }
      }
    },
    "/policies/ransomware-prevention/{Id}": {
      "get": {
        "tags": [
          "Policies"
        ],
        "summary": "get-a-ransomware-prevention-policy",
        "description": "Get a ransomware prevention policy",
        "operationId": "get_a_ransomware_prevention_policy",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Policy id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetRansomwarePreventionPoliciesResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Policies"
        ],
        "summary": "update-a-ransomware-prevention-policy",
        "description": "Update a ransomware prevention policy",
        "operationId": "update_a_ransomware_prevention_policy",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Policy id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "PutRansomwarePreventionPoliciesRequest",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PutRansomwarePreventionPoliciesRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          },
          "201": {
            "description": "Created",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        }
      }
    },
    "/policies/device-control": {
      "post": {
        "tags": [
          "Policies"
        ],
        "summary": "create-a-device-control-policy",
        "description": "create a device control policy",
        "operationId": "create_a_device_control_policy",
        "requestBody": {
          "description": "PostDeviceControlPolicyRequest",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostDeviceControlPolicyRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PostDeviceControlPolicyResponse"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "Policies"
        ],
        "summary": "delete-device-control-policies",
        "description": "This API call deletes device control policies",
        "operationId": "delete_device_control_policies",
        "parameters": [
          {
            "name": "policyIds",
            "in": "query",
            "description": "Specifies the list of policy ids",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          },
          "204": {
            "description": "No Content",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          }
        }
      },
      "get": {
        "tags": [
          "Policies"
        ],
        "summary": "list-device-control-policies",
        "description": "List device control policies",
        "operationId": "list_device_control_policies",
        "parameters": [
          {
            "name": "searchText",
            "in": "query",
            "description": "The free text search string.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "An integer used for paging that indicates the required start index",
            "schema": {
              "minimum": 0,
              "exclusiveMinimum": false,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "endIndex",
            "in": "query",
            "description": "An integer used for paging that indicates the required end index",
            "schema": {
              "minimum": 0,
              "exclusiveMinimum": false,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "policyIds",
            "in": "query",
            "description": "Specifies the list of policy ids",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetDeviceControlPoliciesResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        }
      }
    },
    "/policies/device-control/{Id}": {
      "get": {
        "tags": [
          "Policies"
        ],
        "summary": "get-a-device-control-policy",
        "description": "Get a device control policy",
        "operationId": "get_a_device_control_policy",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Policy id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetDeviceControlPoliciesResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Policies"
        ],
        "summary": "update-a-device-control-policy",
        "description": "Update a device control policy",
        "operationId": "update_a_device_control_policy",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Policy id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "PutDeviceControlPoliciesRequest",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PutDeviceControlPoliciesRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          },
          "201": {
            "description": "Created",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        }
      }
    },
    "/policies/application-whitelisting": {
      "get": {
        "tags": [
          "Policies"
        ],
        "summary": "list-application-whitelisting-policies",
        "description": "This API call outputs a list of the Application whitelisting policies in the system. Use\nthe input parameters to filter the list",
        "operationId": "list-application-whitelisting-policies",
        "parameters": [
          {
            "name": "searchText",
            "in": "query",
            "description": "The free text search string.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "An integer used for paging that indicates the required start index",
            "schema": {
              "minimum": 0,
              "exclusiveMinimum": false,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "endIndex",
            "in": "query",
            "description": "An integer used for paging that indicates the required end index",
            "schema": {
              "minimum": 0,
              "exclusiveMinimum": false,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "policyIds",
            "in": "query",
            "description": "Specifies the list of policy ids",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "state",
            "in": "query",
            "description": "Specifies the  state: Enabled, Disabled",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": ""
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "Policies"
        ],
        "summary": "delete-application-whitelisting-policies",
        "description": "This API call deletes Application whitelisting policies",
        "operationId": "delete-application-whitelisting-policies",
        "parameters": [
          {
            "name": "policyIds",
            "in": "query",
            "description": "Specifies the list of policy ids",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          },
          "204": {
            "description": "No Content",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "Policies"
        ],
        "summary": "create-application-whitelisting-policy",
        "description": "Create a Application Whitelisting Policy.",
        "operationId": "Create-application-whitelisting-policy",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PostApplicationWhitelistingPolicyRequest"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PostApplicationWhitelistingPolicyResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        }
      }
    },
    "/policies/application-whitelisting/{Id}": {
      "get": {
        "tags": [
          "Policies"
        ],
        "summary": "get-an-application-whitelisting-policy",
        "description": "This API call outputs a Application whitelisting policy in the system.",
        "operationId": "get-an-application-whitelisting-policy",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Specifies the application whitelisting policy id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": ""
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Policies"
        ],
        "summary": "update-application-whitelisting-policy",
        "description": "Update a Application Whitelisting Policy.",
        "operationId": "Application-whitelisting-policy-update",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Specifies the application whitelisting policy id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "ApplicationWhitelistingUpdateRequest",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PutApplicationWhitelistingPoliciesRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          },
          "201": {
            "description": "Created",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        }
      }
    },
    "/policies/file-integrity": {
      "get": {
        "tags": [
          "Policies"
        ],
        "summary": "list-file-integrity-policies",
        "description": "This API call outputs a list of the File Integrity policies in the system. Use\nthe input parameters to filter the list",
        "operationId": "list-file-integrity-policies",
        "parameters": [
          {
            "name": "searchText",
            "in": "query",
            "description": "The free text search string.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "An integer used for paging that indicates the required start index",
            "schema": {
              "minimum": 0,
              "exclusiveMinimum": false,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "endIndex",
            "in": "query",
            "description": "An integer used for paging that indicates the required end index",
            "schema": {
              "minimum": 0,
              "exclusiveMinimum": false,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "policyIds",
            "in": "query",
            "description": "Specifies the list of policy ids",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "state",
            "in": "query",
            "description": "Specifies the  state: Enabled, Disabled",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetFileIntegrityPoliciesResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "Policies"
        ],
        "summary": "delete-file-integrity-policies",
        "description": "This API call deletes File Integrity policies",
        "operationId": "delete-file-integrity-policies",
        "parameters": [
          {
            "name": "policyIds",
            "in": "query",
            "description": "Specifies the list of policy ids",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          },
          "204": {
            "description": "No Content",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "Policies"
        ],
        "summary": "create-file-integrity-policy",
        "description": "Create a File Integrity Policy.",
        "operationId": "create-file-integrity-policy",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PostFileIntegrityPolicyRequest"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PostFileIntegrityPolicyResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        }
      }
    },
    "/policies/file-integrity/{Id}": {
      "get": {
        "tags": [
          "Policies"
        ],
        "summary": "get-a-file-integrity-policy",
        "description": "This API call outputs a File Integrity policy in the system.",
        "operationId": "get-a-file-integrity-policy",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Specifies the file-integrity policy id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetFileIntegrityPoliciesResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Policies"
        ],
        "summary": "update-file-integrity-policy",
        "description": "Update a File Integrity Policy.",
        "operationId": "update-a-file-integrity-policy",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Specifies the file integrity policy id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "FileIntegrityUpdateRequest",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PutFileIntegrityPoliciesRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          },
          "201": {
            "description": "Created",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        }
      }
    },
    "/securities/file-integrity": {
      "get": {
        "tags": [
          "Securities"
        ],
        "summary": "get-file-integrity-profiles",
        "description": "Get the list of File Integrity Profile.",
        "operationId": "get_a_file_integrity_profiles",
        "parameters": [
          {
            "name": "searchText",
            "in": "query",
            "description": "The free text search string. The API will return file integrity profiles",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "An integer used for paging that indicates the required start index",
            "schema": {
              "minimum": 0,
              "exclusiveMinimum": false,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "endIndex",
            "in": "query",
            "description": "An integer used for paging that indicates the required end index",
            "schema": {
              "minimum": 0,
              "exclusiveMinimum": false,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "os",
            "in": "query",
            "description": "OS identifiers list.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FileIntegrityProfileResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "Securities"
        ],
        "summary": "create-a-file-integrity-profile",
        "description": "Creates a File Integrity Profile.",
        "operationId": "create_a_file_integrity_profile",
        "requestBody": {
          "description": "createFileIntegrityProfileRequest",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFileIntegrityProfileRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/FileIntegrityProfileResponse"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "CreateFileIntegrityProfileRequest"
      },
      "delete": {
        "tags": [
          "Securities"
        ],
        "summary": "delete-file-integrity-profiles",
        "description": "Deletes File Integrity Profiles.",
        "operationId": "delete_file_integrity_profiles",
        "parameters": [
          {
            "name": "profileIds",
            "in": "query",
            "description": "Specifies the list of profile ids",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          },
          "204": {
            "description": "No Content",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          }
        }
      }
    },
    "/securities/file-integrity/{Id}": {
      "get": {
        "tags": [
          "Securities"
        ],
        "summary": "get-a-file-integrity-profile",
        "description": "Get a File Integrity Profile.",
        "operationId": "get_a_file_integrity_profile",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Profile id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/FileIntegrityProfileResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Securities"
        ],
        "summary": "update-a-file-integrity-profile",
        "description": "Updates a File Integrity Profile.",
        "operationId": "update_a_file_integrity_profile",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Profile id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "updateFileIntegrityProfileRequest",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateFileIntegrityProfileRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/FileIntegrityProfileResponse"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "updateFileIntegrityProfileRequest"
      }
    },
    "/login": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "post-user-login",
        "description": "The user login API",
        "operationId": "post-user-login",
        "requestBody": {
          "description": "user login",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostLoginRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "token = Base64(Header).Base64(Payload).Signature\n\nHeader:\n{\n\"typ\":\"JWT\",\n\"alg\":\"HS256\"\n}\n\nPayload:\n{\n\"userid\":111111111,\n\"username\":\"User1\",\n\"exp\":1300819380\n}\n\nSignature:\nHMACSHARE256(Base64(Header)+\".\"+Base64(Payload),secret)\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        }
      }
    },
    "/users/qr-code": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "post-qr-code",
        "description": "This API call regenerate a TOTP QR code",
        "operationId": "post-qr-code",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "image/png": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        }
      }
    },
    "/users/{Id}/qr-code": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "get-qr-code",
        "description": "This API call get the TOTP QR code of the user",
        "operationId": "get-qr-code",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "User id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "image/png": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "put-qr-code",
        "description": "This API call change the TOTP QR code of the user",
        "operationId": "put-qr-code",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "User id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "image/png": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        }
      }
    },
    "/users/{Id}/tfa-token": {
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "reset-two-factor-authentication-token",
        "description": "This API reset the two factor authentication token for the user.",
        "operationId": "reset-two-factor-authentication-token",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "User id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          },
          "201": {
            "description": "Created",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "userRequest"
      }
    },
    "/users/ldap-settings": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "update-ldap-settings",
        "description": "Create / Update LDAP authentication settings",
        "operationId": "update-ldap-settings",
        "requestBody": {
          "description": "updateLdapRequest",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateLdapRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          },
          "201": {
            "description": "Created",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        }
      }
    },
    "/users/ldap-settings/testing": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "test-ldap-settings",
        "description": "Test LDAP authentication settings",
        "operationId": "test-ldap-settings",
        "requestBody": {
          "description": "updateLdapRequest",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TestLdapRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TestLdapResponse"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        }
      }
    },
    "/users/local-users": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "create-user",
        "description": "This API create user in the system. (only for Admin role)",
        "operationId": "create-user",
        "requestBody": {
          "description": "userRequest",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostCreateUserRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PostCreateUserResponse"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "userRequest"
      },
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "list-users",
        "description": "This API call outputs a list of the users in the system. Use the\ninput parameters to filter the list",
        "operationId": "list-users",
        "parameters": [
          {
            "name": "organization",
            "in": "query",
            "description": "Specifies the organization. The value that you specify for this parameter indicates how the operation applies to an organization(s). Some parts of the Fortinet system have separate, non-shared data that is organization-specific. Other parts of the system have data that is shared by all organizations. The value that you specify for the organization parameter, as described below, determines to which organization(s) an operation applies:\n* Exact organization name – Specifies the name of a specific organization. The value that you specify here must match exactly.\n* All organizations – Indicates that the operation applies to all organizations. In this case, the same data is shared by all organizations.\n",
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetUserResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "delete-user",
        "description": "This API delete user from the system.",
        "operationId": "delete-user",
        "parameters": [
          {
            "name": "userIds",
            "in": "query",
            "description": "Specifies the list of user ids.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          },
          "204": {
            "description": "No Content",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          }
        }
      }
    },
    "/users/local-users/{Id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "get-local-user",
        "description": "This API call outputs a local users in the system.",
        "operationId": "get-local-user",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "User id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetUserResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        }
      },
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "update-user",
        "description": "This API update user in the system.",
        "operationId": "update-user",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "User id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "userRequest",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchUserRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PatchUserResponse"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "userRequest"
      }
    },
    "/users/local-users/{Id}/passwords": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "reset-password",
        "description": "This API reset user password.",
        "operationId": "reset-password",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "User id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "userRequest",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PutUserAuthenticationRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          },
          "201": {
            "description": "Created",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "userRequest"
      }
    },
    "/agent/register": {
      "post": {
        "tags": [
          "Agent"
        ],
        "summary": "post-agent-register",
        "description": "The API enable the agent to register itself with the controller",
        "operationId": "post-agent-register",
        "requestBody": {
          "description": "registering with the controller",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostAgentRegisterRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PostAgentRegisterResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        }
      }
    },
    "/agent/status": {
      "post": {
        "tags": [
          "Agent"
        ],
        "summary": "post-agent-status",
        "description": "The API enable the agent to send status updates to keep the controller informed",
        "operationId": "post-agent-status",
        "requestBody": {
          "description": "sending status updatesr",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostAgentStatusRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PostAgentStatusResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        }
      }
    },
    "/agent/event": {
      "post": {
        "tags": [
          "Agent"
        ],
        "summary": "post-agent-event",
        "description": "The API enable the agent to send event to controller",
        "operationId": "post-agent-event",
        "requestBody": {
          "description": "sending event",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostAgentEventRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        }
      }
    },
    "/agent/upgrade/{os}/{version}/{bit}": {
      "get": {
        "tags": [
          "Agent"
        ],
        "summary": "get-agent-installer",
        "description": "This API call get the agent installer",
        "operationId": "get-agent-installer",
        "parameters": [
          {
            "name": "os",
            "in": "path",
            "description": "The OS of the device.The value should be \"Windows\" / \"OSX\" / \"Ubuntu1604\" / \"Ubuntu1804\" / \"Ubuntu2004\" / \"Centos8\" / \"Centos7\" / \"Centos6\" / \"Oracle{majorVersion}\" / \"Amazon{majorVersion}\" / \"OpenSUSE{majorVersion}\"",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "description": "The target agent version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "bit",
            "in": "path",
            "description": "The bit of the device. The value should be 32 or 64",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetAgentUpgradeResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        }
      }
    },
    "/agent/configuration": {
      "get": {
        "tags": [
          "Agent"
        ],
        "summary": "get-agent-configuration",
        "description": "This API call get the agent configuratiion",
        "operationId": "get-agent-configuration",
        "parameters": [
          {
            "name": "protocolVersion",
            "in": "query",
            "description": "The protocol version.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "deviceId",
            "in": "query",
            "description": "The agent id",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "deviceVersion",
            "in": "query",
            "description": "The agent version.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "os",
            "in": "query",
            "description": "The agent os.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "Current saved configuration version",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "The format is {header}{object}{object}{object}... \n\nThere can be multiple objects after header.\n\nHeader please refer to ConfigHeader\n\nObject can be one of the following schema:\n  \n  LicenseObject\n\n  AgentObject\n  \n  FIMProfileObject\n\n  PolicyObject\n  \n  RuleObject\n\n  AgentGroupObject\n  \n  FIMRuleObject\n\n  ProfileObject\n  \n  ApplicationControlModelObject\n",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        }
      }
    },
    "/agents": {
      "get": {
        "tags": [
          "Agents"
        ],
        "summary": "list-agents",
        "description": "This API call outputs a list of the Agents in the system. Use\nthe input parameters to filter the list",
        "operationId": "list-agents",
        "parameters": [
          {
            "name": "searchText",
            "in": "query",
            "description": "The free text search string.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "agentIds",
            "in": "query",
            "description": "Specifies the list of agent ids",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "agents",
            "in": "query",
            "description": "Specifies the list of agent names",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "agentGroups",
            "in": "query",
            "description": "Specifies the list of agent group names and retrieves agents under the\ngiven groups",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "ips",
            "in": "query",
            "description": "Specifies the list of IP values",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "operatingSystems",
            "in": "query",
            "description": "Specifies the list of specific operating systems. For example,\nWindows 10 Pro, macOS 13.1 Ventura, or others.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "osFamilies",
            "in": "query",
            "description": "Specifies the list of operating system families: Windows, Windows\nServer or macOS",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "states",
            "in": "query",
            "description": "Specifies the list of agents states: Running, Disconnected, Disabled, Degraded,\nPending Reboot, Expired, Migrated or Pending Migration",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "versions",
            "in": "query",
            "description": "Specifies the list of agents versions",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "An integer used for paging that indicates the required start index",
            "schema": {
              "minimum": 0,
              "exclusiveMinimum": false,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "endIndex",
            "in": "query",
            "description": "An integer used for paging that indicates the required end index",
            "schema": {
              "minimum": 0,
              "exclusiveMinimum": false,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "firstSeen",
            "in": "query",
            "description": "Retrieves agents that were first seen after the value assigned\nto this date. Date Format: yyyy-MM-dd HH:mm:ss",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastSeenStart",
            "in": "query",
            "description": "Retrieves agents that were last seen after the value assigned\nto this date. Date Format: yyyy-MM-dd HH:mm:ss",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastSeenEnd",
            "in": "query",
            "description": "Retrieves agents that were last seen before the value assigned\nto this date. Date Format: yyyy-MM-dd HH:mm:ss",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "showExpired",
            "in": "query",
            "description": "Specifies whether to include agents which have been disconnected\nfor more than 30 days (sequentially) and are marked as Expired. Default is False.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "loggedUser",
            "in": "query",
            "description": "Specifies the user that was logged when the event occurred",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "hasCrashDumps",
            "in": "query",
            "description": "Retrieves agents that have crash dumps. Default is False",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "organization",
            "in": "query",
            "description": "Specifies the organization. The value that you specify for this parameter indicates how the operation applies to an organization(s). Some parts of the Fortinet system have separate, non-shared data that is organization-specific. Other parts of the system have data that is shared by all organizations. The value that you specify for the organization parameter, as described below, determines to which organization(s) an operation applies:\n* Exact organization name – Specifies the name of a specific organization. The value that you specify here must match exactly.\n* All organizations – Indicates that the operation applies to all organizations. In this case, the same data is shared by all organizations.\n",
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetAgentsResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "Agents"
        ],
        "summary": "delete-agents",
        "description": "This API call deletes a Agent(s)",
        "operationId": "delete-agents",
        "parameters": [
          {
            "name": "agentIds",
            "in": "query",
            "description": "Specifies the list of agent ids",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          },
          "204": {
            "description": "No Content",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          }
        }
      },
      "patch": {
        "tags": [
          "Agents"
        ],
        "summary": "update-agents",
        "description": "This API call update agents",
        "operationId": "update-agents",
        "parameters": [
          {
            "name": "agentIds",
            "in": "query",
            "description": "Specifies the list of agent ids",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "requestBody": {
          "description": "Update the existent agent(s)",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchAgentsRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          },
          "201": {
            "description": "Created",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        }
      }
    },
    "/agents/{Id}": {
      "get": {
        "tags": [
          "Agents"
        ],
        "summary": "get-agent",
        "description": "This API call outputs the Agent in the system.",
        "operationId": "get-agent",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Agent id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetAgentsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        }
      },
      "patch": {
        "tags": [
          "Agents"
        ],
        "summary": "update-agent",
        "description": "This API call update agent",
        "operationId": "update-agent",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Agent id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Update the existent agent",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchAgentsRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          },
          "201": {
            "description": "Created",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        }
      }
    },
    "/agents/{Id}/logs": {
      "get": {
        "tags": [
          "Agents"
        ],
        "summary": "agent-logs",
        "description": "This API call retrieves a agent logs",
        "operationId": "agent-logs",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Agent id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "This operation results in a file stream (binary data), which\nis a .zip file",
            "content": {
              "application/zip": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            },
            "headers": {
              "Content-Disposition": {
                "schema": {
                  "type": "string",
                  "example": "attachment; filename=\"log.zip\""
                }
              },
              "Content-Length": {
                "schema": {
                  "type": "integer",
                  "example": 1024
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        }
      }
    },
    "/agent-groups": {
      "post": {
        "tags": [
          "Agent Groups"
        ],
        "summary": "create-agent-group",
        "description": "This API call create a agent group",
        "operationId": "create-agent-group",
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "Specifies the id of a specific organization.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "AgentGroupCreateRequest",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostAgentGroupsRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PostAgentGroupsResponse"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        }
      },
      "get": {
        "tags": [
          "Agent Groups"
        ],
        "summary": "list-agent-groups",
        "description": "This API call output the agent groups",
        "operationId": "list-agent-groups",
        "parameters": [
          {
            "name": "organizationId",
            "in": "query",
            "description": "Specifies id of the organization.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "searchText",
            "in": "query",
            "description": "The free text search string.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "An integer used for paging that indicates the required start index",
            "schema": {
              "minimum": 0,
              "exclusiveMinimum": false,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "endIndex",
            "in": "query",
            "description": "An integer used for paging that indicates the required end index",
            "schema": {
              "minimum": 0,
              "exclusiveMinimum": false,
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetAgentGroupsResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "Agent Groups"
        ],
        "summary": "delete-agent-groups",
        "description": "This API call deletes agent groups",
        "operationId": "delete-agent-groups",
        "parameters": [
          {
            "name": "agentGroupIds",
            "in": "query",
            "description": "Specifies the list of agent group ids",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          },
          "204": {
            "description": "No Content",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          }
        }
      }
    },
    "/agent-groups/installers": {
      "get": {
        "tags": [
          "Agent Groups"
        ],
        "summary": "list-agent-group-installer-version",
        "description": "This API call output the installer version of agent groups",
        "operationId": "list-agent-group-installer-version",
        "parameters": [
          {
            "name": "searchText",
            "in": "query",
            "description": "The free text search string.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "An integer used for paging that indicates the required start index",
            "schema": {
              "minimum": 0,
              "exclusiveMinimum": false,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "endIndex",
            "in": "query",
            "description": "An integer used for paging that indicates the required end index",
            "schema": {
              "minimum": 0,
              "exclusiveMinimum": false,
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetAgentGroupInstallersResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Agent Groups"
        ],
        "summary": "update-agent-group-installer",
        "description": "This API update target installer version of agent groups",
        "operationId": "update-agent-group-installer",
        "parameters": [
          {
            "name": "organization",
            "in": "query",
            "description": "Specifies the organization. The value that you specify for this parameter indicates how the operation applies to an organization(s). Some parts of the Fortinet system have separate, non-shared data that is organization-specific. Other parts of the system have data that is shared by all organizations. The value that you specify for the organization parameter, as described below, determines to which organization(s) an operation applies:\n* Exact organization name – Specifies the name of a specific organization. The value that you specify here must match exactly.\n* All organizations – Indicates that the operation applies to all organizations. In this case, the same data is shared by all organizations.\n",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "requestUpdateData",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetTargetVersionBodyRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          },
          "201": {
            "description": "Created",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "requestUpdateData"
      }
    },
    "/agent-groups/{Id}": {
      "get": {
        "tags": [
          "Agent Groups"
        ],
        "summary": "list-an-agent-group",
        "description": "This API call output an agent group",
        "operationId": "list-an-agent-group",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Agent group id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetAgentGroupsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Agent Groups"
        ],
        "summary": "update-agent-group",
        "description": "This API call update agent group",
        "operationId": "update-agent-group",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Agent group id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Update the existent agent group",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAgentGroupRequest"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          },
          "201": {
            "description": "Created",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        }
      }
    },
    "/agent-groups/{Id}/installers": {
      "get": {
        "tags": [
          "Agent Groups"
        ],
        "summary": "list-an-agent-group-installer-version",
        "description": "This API call output the installer version of an agent group",
        "operationId": "list-an-agent-group-installer-version",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Agent group id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetAgentGroupInstallersResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Agent Groups"
        ],
        "summary": "update-an-agent-group-installer",
        "description": "This API update target installer version of agent groups",
        "operationId": "update-an-agent-group-installer",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Agent group id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "requestUpdateData",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetTargetVersionRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          },
          "201": {
            "description": "Created",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "requestUpdateData"
      }
    },
    "/agent-installers": {
      "get": {
        "tags": [
          "Agent Installers"
        ],
        "summary": "list-agent-installers",
        "description": "This API call output the available agent installer",
        "operationId": "get-agent-installers",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetAgentInstallersResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        }
      }
    },
    "/securities/application-whitelisting": {
      "post": {
        "tags": [
          "Securities"
        ],
        "summary": "create-application-whitelisting",
        "description": "Create a application whitelisting",
        "operationId": "create-application-whitelisting",
        "requestBody": {
          "description": "ApplicationWhitelistingCreateRequest",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationWhitelistingCreateRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationWhitelistingCreateResponse"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApplicationWhitelistingCreateRequest"
      },
      "get": {
        "tags": [
          "Securities"
        ],
        "summary": "list-application-whitelisting",
        "description": "This API call outputs a list of the Application whitelisting in the system. Use\nthe input parameters to filter the list",
        "operationId": "list-application-whitelisting",
        "parameters": [
          {
            "name": "searchText",
            "in": "query",
            "description": "The free text search string.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "An integer used for paging that indicates the required start index",
            "schema": {
              "minimum": 0,
              "exclusiveMinimum": false,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "endIndex",
            "in": "query",
            "description": "An integer used for paging that indicates the required end index",
            "schema": {
              "minimum": 0,
              "exclusiveMinimum": false,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "policyId",
            "in": "query",
            "description": "Specifies the policy id",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "state",
            "in": "query",
            "description": "Specifies the  state: Enabled, Disabled",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organizationId",
            "in": "query",
            "description": "Specifies the organization. The value that you specify for this parameter indicates how the operation applies to an organization(s). Some parts of the Fortinet system have separate, non-shared data that is organization-specific. Other parts of the system have data that is shared by all organizations. The value that you specify for the organization parameter, as described below, determines to which organization(s) an operation applies:\n* Exact organization name – Specifies the name of a specific organization. The value that you specify here must match exactly.\n* All organizations – Indicates that the operation applies to all organizations. In this case, the same data is shared by all organizations.\n",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetApplicationWhitelistingResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "Securities"
        ],
        "summary": "delete-application-whitelisting",
        "description": "This API call deletes a Application whitelisting",
        "operationId": "delete-application-whitelisting",
        "parameters": [
          {
            "name": "applicationIds",
            "in": "query",
            "description": "Specifies the list of application ids",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          },
          "204": {
            "description": "No Content",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          }
        }
      }
    },
    "/securities/application-whitelisting/csv": {
      "post": {
        "tags": [
          "Securities"
        ],
        "summary": "upload-application-whitelisting",
        "description": "Upload application whitelisting",
        "operationId": "upload-application-whitelisting",
        "requestBody": {
          "description": "ApplicationWhitelistingUploadRequest",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationWhitelistingUploadRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApplicationWhitelistingUploadResponse"
                  }
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApplicationWhitelistingUploadRequest"
      }
    },
    "/securities/application-whitelisting/{Id}": {
      "get": {
        "tags": [
          "Securities"
        ],
        "summary": "list-application-whitelisting",
        "description": "This API call outputs the Application whitelisting in the system.",
        "operationId": "get-an-application-whitelisting",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "required": true,
            "description": "Specifies the id of a application.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetApplicationWhitelistingResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Securities"
        ],
        "summary": "update-application-whitelisting",
        "description": "Update a application whitelisting",
        "operationId": "application-whitelisting_2",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "required": true,
            "description": "Specifies the id of a application.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "ApplicationWhitelistingUpdateRequest",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationWhitelistingUpdateRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          },
          "201": {
            "description": "Created",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "ApplicationWhitelistingUpdateRequest"
      }
    },
    "/events": {
      "get": {
        "tags": [
          "Events"
        ],
        "summary": "list-events",
        "description": "List Events",
        "operationId": "list-events",
        "parameters": [
          {
            "name": "searchText",
            "in": "query",
            "description": "The free text search string.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "An integer used for paging that indicates the required start index",
            "schema": {
              "minimum": 0,
              "exclusiveMinimum": false,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "endIndex",
            "in": "query",
            "description": "An integer used for paging that indicates the required end index",
            "schema": {
              "minimum": 0,
              "exclusiveMinimum": false,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "eventIds",
            "in": "query",
            "description": "Specifies the required event IDs",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "classifications",
            "in": "query",
            "description": "Specifies the classification of the event",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "Malicious",
                "Suspicious",
                "Inconclusive",
                "Likely Safe",
                "PUP",
                "Safe"
              ]
            }
          },
          {
            "name": "seen",
            "in": "query",
            "description": "A true/false parameter indicating whether events were read/unread\nby the user operating the API",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "handled",
            "in": "query",
            "description": " A true/false parameter indicating whether events were handled/unhandled",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "deviceName",
            "in": "query",
            "description": "Specifies the device name where the events occurred",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "process",
            "in": "query",
            "description": "Specifies the main process of the event",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "destinations",
            "in": "query",
            "description": "Specifies the connection destination(s) of the events",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "firstSeenFrom",
            "in": "query",
            "description": "Specifies the from date when the event was first seen",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "firstSeenTo",
            "in": "query",
            "description": "Specifies the to date when the event was first seen",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastSeenFrom",
            "in": "query",
            "description": "Specifies the from date when the event was last seen",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastSeenTo",
            "in": "query",
            "description": "Specifies the to date when the event was last seen",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "signed",
            "in": "query",
            "description": "A true/false parameter indicating if the event is signed",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "paths",
            "in": "query",
            "description": "Specifies the paths of the processes related to the event",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "actions",
            "in": "query",
            "description": "Specifies the action of the event",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "enum": [
                "Block",
                "SimulationBlock",
                "Log"
              ]
            }
          },
          {
            "name": "rule",
            "in": "query",
            "description": "Specifies the short rule name of the rule that triggered the\nevents",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "loggedUser",
            "in": "query",
            "description": "Specifies the logged user",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "agentGroups",
            "in": "query",
            "description": "Specifies the agent groups whose agent reported the events",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "operatingSystems",
            "in": "query",
            "description": "Specifies the operating system of the devices where the events\noccurred",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "deviceIps",
            "in": "query",
            "description": "Specifies the IPs of the devices where the event occurred",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "macAddresses",
            "in": "query",
            "description": "Specifies the mac addresses where the event occurred",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "deviceControl",
            "in": "query",
            "description": "A true/false parameter indicating whether to include only device\ncontrol events",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "fileHash",
            "in": "query",
            "description": "Specifies the hash signature of the main process of the event",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "archived",
            "in": "query",
            "description": "A true/false parameter indicating whether to include only archived\nevents",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "muted",
            "in": "query",
            "description": "A true/false parameter indicating if the event is muted",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "expired",
            "in": "query",
            "description": "A true/false parameter indicating whether to include only expired\nevents",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetEventsResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "Events"
        ],
        "summary": "delete-events",
        "description": "This API call delete events",
        "operationId": "events",
        "parameters": [
          {
            "name": "eventIds",
            "in": "query",
            "description": "Specifies the required event IDs",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          },
          "204": {
            "description": "No Content",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          }
        }
      },
      "patch": {
        "tags": [
          "Events"
        ],
        "summary": "update-events",
        "description": "This API call updates the read/unread or handled/unhandled\nstate of events. The output of this call is a message indicating whether\nthe update succeeded or failed",
        "operationId": "events_1",
        "parameters": [
          {
            "name": "eventIds",
            "in": "query",
            "description": "Specifies the required event IDs",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "requestBody": {
          "description": "updateEventsRequest",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEventsRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          },
          "201": {
            "description": "Created",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "updateEventsRequest"
      }
    },
    "/events/{Id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "summary": "list-an-event",
        "description": "List An Event",
        "operationId": "list-an-event",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Specifies the ID of the event",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetEventsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        }
      },
      "patch": {
        "tags": [
          "Events"
        ],
        "summary": "update-an-event",
        "description": "This API call updates the read/unread or handled/unhandled\nstate of an event. The output of this call is a message indicating whether\nthe update succeeded or failed",
        "operationId": "update-an-event",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Specifies the ID of the event",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "updateEventsRequest",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEventsRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          },
          "201": {
            "description": "Created",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "updateEventsRequest"
      }
    },
    "/events/{Id}/json": {
      "get": {
        "tags": [
          "Events"
        ],
        "summary": "export-event-json",
        "description": "Get event as Json format",
        "operationId": "export-event-json",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Specifies the ID of the event",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "This operation results in a file stream",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            },
            "headers": {
              "Content-Disposition": {
                "schema": {
                  "type": "string",
                  "example": "attachment; filename=\"data.json\""
                }
              },
              "Content-Length": {
                "schema": {
                  "type": "integer",
                  "example": 1024
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        }
      }
    },
    "/logs/forwardings": {
      "post": {
        "tags": [
          "Logs"
        ],
        "summary": "create/clone-log-forwarding-profile",
        "description": "Create a log forwarding profile",
        "operationId": "log-forwarding-profile_2",
        "requestBody": {
          "description": "LogForwardingProfileCreateRequest",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LogForwardingProfileCreateRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/LogForwardingProfileCreateResponse"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "LogForwardingProfileCreateRequest"
      },
      "get": {
        "tags": [
          "Logs"
        ],
        "summary": "list-log-forwarding-profile",
        "description": "Get the list of log forwarding profiles.",
        "operationId": "log-forwarding-profile_1",
        "parameters": [
          {
            "name": "searchText",
            "in": "query",
            "description": "The free text search string.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "An integer used for paging that indicates the required start index",
            "schema": {
              "minimum": 0,
              "exclusiveMinimum": false,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "endIndex",
            "in": "query",
            "description": "An integer used for paging that indicates the required end index",
            "schema": {
              "minimum": 0,
              "exclusiveMinimum": false,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "organizationId",
            "in": "query",
            "description": "Specifies the id of a specific organization.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LogForwardingProfileResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "Logs"
        ],
        "summary": "delete-log-forwarding-profile(s)",
        "description": "Deletes a log frowarding profile(s).",
        "operationId": "log-forwarding-profile_3",
        "parameters": [
          {
            "name": "profileId",
            "in": "query",
            "description": "To be deleted profile's id.",
            "required": true,
            "style": "form",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          },
          "204": {
            "description": "No Content",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          }
        }
      }
    },
    "/logs/forwardings/{Id}": {
      "get": {
        "tags": [
          "Logs"
        ],
        "summary": "get-a-log-forwarding-profile",
        "description": "Get a log forwarding profile.",
        "operationId": "get-a-log-forwarding-profile",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Log forwarding profile id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/LogForwardingProfileResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Logs"
        ],
        "summary": "update-log-forwarding-profile",
        "description": "Update a log forwarding profile",
        "operationId": "log-forwarding-profile_4",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Log forwarding profile id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "LogForwardingProfileUpdateRequest",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LogForwardingProfileUpdateRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          },
          "201": {
            "description": "Created",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "LogForwardingProfileUpdateRequest"
      }
    },
    "/logs/servers": {
      "post": {
        "tags": [
          "Logs"
        ],
        "summary": "create-log-server",
        "description": "This API call create a log server",
        "operationId": "create-log-server",
        "requestBody": {
          "description": "create a log server",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostLogServerRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PostLogServerResponse"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        }
      },
      "get": {
        "tags": [
          "Logs"
        ],
        "summary": "list-log-servers",
        "description": "This API call outputs a list of the log servers in the system. Use\nthe input parameters to filter the list",
        "operationId": "list-log-servers",
        "parameters": [
          {
            "name": "searchText",
            "in": "query",
            "description": "The free text search string.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "An integer used for paging that indicates the required start index",
            "schema": {
              "minimum": 0,
              "exclusiveMinimum": false,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "endIndex",
            "in": "query",
            "description": "An integer used for paging that indicates the required end index",
            "schema": {
              "minimum": 0,
              "exclusiveMinimum": false,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "logServerIds",
            "in": "query",
            "description": "Specifies the list of log server ids",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "logServerNames",
            "in": "query",
            "description": "Specifies the list of log server names",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Specifies the log server status: Enable/Disabled",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "logForwardingProfileIds",
            "in": "query",
            "description": "Specifies the list of log forwarding profile ids and retrieves the log server associated with the profiles",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "logForwardingProfileNames",
            "in": "query",
            "description": "Specifies the list of log forwarding prfile names",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "ips",
            "in": "query",
            "description": "Specifies the list of IP values",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "protocol",
            "in": "query",
            "description": "Specifies the list of protocol. For example,\nHTTPS",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "port",
            "in": "query",
            "description": "Specifies the list of port",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetLogServersResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "Logs"
        ],
        "summary": "delete-log-servers",
        "description": "This API call deletes a log server(s)",
        "operationId": "delete-log-servers",
        "parameters": [
          {
            "name": "logServerIds",
            "in": "query",
            "description": "Specifies the list of log server ids",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          },
          "204": {
            "description": "No Content",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          }
        }
      }
    },
    "/logs/servers/{Id}": {
      "get": {
        "tags": [
          "Logs"
        ],
        "summary": "get-a-log-server",
        "description": "This API call outputs a log server in the system",
        "operationId": "get-a-log-server",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Log server id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetLogServersResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Logs"
        ],
        "summary": "update-log-server",
        "description": "This API call update log server",
        "operationId": "update-log-server",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Log server id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Update the existent log server",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PutLogServerRequest"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          },
          "201": {
            "description": "Created",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        }
      }
    },
    "/organizations": {
      "post": {
        "tags": [
          "Organizations"
        ],
        "summary": "create-organization",
        "description": "This API creates organization in the system (only for Admin role)",
        "operationId": "create-organization",
        "requestBody": {
          "description": "createAccountRequest",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAccountRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          },
          "201": {
            "description": "Created",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "createAccountRequest"
      },
      "get": {
        "tags": [
          "Organizations"
        ],
        "summary": "list-organizations",
        "description": "This API call outputs a list of the accounts in the system.",
        "operationId": "list-organizations",
        "parameters": [
          {
            "name": "searchText",
            "in": "query",
            "description": "The free text search string.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "description": "An integer used for paging that indicates the required start index",
            "schema": {
              "minimum": 0,
              "exclusiveMinimum": false,
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "endIndex",
            "in": "query",
            "description": "An integer used for paging that indicates the required end index",
            "schema": {
              "minimum": 0,
              "exclusiveMinimum": false,
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Organizations"
        ],
        "summary": "import-organization-from-file",
        "description": "Import organization",
        "operationId": "import-organization",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "file": {
                    "type": "string",
                    "description": "Export zip file",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetImportAccountResponse"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "Organizations"
        ],
        "summary": "delete-organizations",
        "description": "This API delete organizations in the system (only for Admin role)",
        "operationId": "delete-organizations",
        "parameters": [
          {
            "name": "organizationIds",
            "in": "query",
            "description": "Specifies the list of organization ids",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          },
          "204": {
            "description": "No Content",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          }
        }
      }
    },
    "/organizations/{Id}": {
      "delete": {
        "tags": [
          "Organizations"
        ],
        "summary": "delete-organization",
        "description": "This API delete organization in the system (only for Admin role)",
        "operationId": "delete-organization",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Specifies the id of a specific organization.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          },
          "204": {
            "description": "No Content",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Organizations"
        ],
        "summary": "update-organization",
        "description": "This API update organization in the system (only for Admin role)",
        "operationId": "update-organization",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Specifies the id of a specific organization.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "accountRequest",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          },
          "201": {
            "description": "Created",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "accountRequest"
      },
      "get": {
        "tags": [
          "Organizations"
        ],
        "summary": "export-organization-to-zip-file",
        "description": "Export organization data as zip file",
        "operationId": "export-organization",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Organization to export",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "destinationName",
            "in": "query",
            "description": "The organization destination name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        }
      }
    },
    "/organizations/{Id}/agents": {
      "post": {
        "tags": [
          "Organizations"
        ],
        "summary": "transfer-agents",
        "description": "Transfer agents from aggregator to aggregator as the organization migration process",
        "operationId": "transfer-agents",
        "parameters": [
          {
            "name": "Id",
            "in": "path",
            "description": "Specifies the id of a target organization.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "actionType",
            "in": "query",
            "description": "Start (Default) or Stop to transfer agents",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "transferAgentRequests",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransferAgentsRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          },
          "201": {
            "description": "Created",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "transferAgentsRequest"
      }
    },
    "/systems/certificates": {
      "post": {
        "tags": [
          "Systems"
        ],
        "summary": "upload-certificate",
        "description": "Upload certificate to the system",
        "operationId": "upload-certificate",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "certificateFile",
                  "privateKeyFile"
                ],
                "properties": {
                  "certificateFile": {
                    "type": "string",
                    "description": "cetificate file",
                    "format": "binary"
                  },
                  "privateKeyFile": {
                    "type": "string",
                    "description": "private key file",
                    "format": "binary"
                  },
                  "privateKeyPassword": {
                    "type": "string",
                    "description": "private key password"
                  }
                }
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        }
      }
    },
    "/systems/configurations": {
      "put": {
        "tags": [
          "Systems"
        ],
        "summary": "import-system-from-file (System restore)",
        "description": "Import system from a zip file (System restore)",
        "operationId": "import-system",
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "file": {
                    "type": "string",
                    "description": "The ZIP file containing the system configuration to import",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          },
          "201": {
            "description": "Created",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        }
      },
      "get": {
        "tags": [
          "Systems"
        ],
        "summary": "export-system-to-zip-file (System backup)",
        "description": "Export system data as zip file (System backup)",
        "operationId": "export-system",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/zip": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        }
      }
    },
    "/systems/firmware": {
      "put": {
        "tags": [
          "Systems"
        ],
        "summary": "upgrade-firmware-from-file",
        "description": "Upgrade firmware",
        "operationId": "upgrade-firmware",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "properties": {
                  "file": {
                    "type": "string",
                    "description": "Firmware file",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          },
          "201": {
            "description": "Created",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        }
      },
      "get": {
        "tags": [
          "Systems"
        ],
        "summary": "get-firmware-information",
        "description": "Get firmware information",
        "operationId": "get-firmware-information",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/GetFirmwareInformation"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        }
      }
    },
    "/systems/contents": {
      "put": {
        "tags": [
          "Systems"
        ],
        "summary": "upload-content",
        "description": "Upload content to the system",
        "operationId": "upload-content",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "file"
                ],
                "properties": {
                  "file": {
                    "type": "string",
                    "description": "file",
                    "format": "binary"
                  }
                }
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        }
      }
    },
    "/systems/agents": {
      "put": {
        "tags": [
          "Systems"
        ],
        "summary": "update-agent-configuration",
        "description": "Update Agent Configuration",
        "operationId": "update-agent-configuration",
        "requestBody": {
          "description": "Update Agent configuration request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAgentConfigurationRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ConfigHeader": {
        "title": "ConfigHeader",
        "required": [
          "type",
          "version",
          "objectId"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Full or Partial"
          },
          "version": {
            "type": "integer",
            "description": "The latest configuration version in controller",
            "format": "int64"
          },
          "objectId": {
            "type": "integer",
            "description": "The agent object id",
            "format": "int64"
          }
        }
      },
      "LicenseObject": {
        "title": "LicenseObject",
        "required": [
          "objectId",
          "objectType",
          "command",
          "license",
          "publicKey"
        ],
        "type": "object",
        "properties": {
          "objectId": {
            "type": "integer",
            "description": "The object id",
            "format": "int64"
          },
          "objectType": {
            "type": "string",
            "description": "Object Type. The objectType should be License."
          },
          "command": {
            "type": "string",
            "description": "Could be Create, Update, Delete, agent will do the modification to config according to the command"
          },
          "minVersion": {
            "type": "string",
            "description": "The minimum version of agent this object can work"
          },
          "maxVersion": {
            "type": "string",
            "description": "the maximum version of agent this object can work"
          },
          "licenseVersion": {
            "type": "integer",
            "description": "The license version",
            "format": "int64"
          },
          "license": {
            "type": "string",
            "description": "The license"
          },
          "publicKey": {
            "type": "string",
            "description": "The public key"
          }
        }
      },
      "AgentObject": {
        "title": "AgentObject",
        "required": [
          "objectId",
          "objectType",
          "command"
        ],
        "type": "object",
        "properties": {
          "objectId": {
            "type": "integer",
            "description": "The object id",
            "format": "int64"
          },
          "objectType": {
            "type": "string",
            "description": "Object Type. The objectType should be Agent."
          },
          "command": {
            "type": "string",
            "description": "Could be Create, Update, Delete, agent will do the modification to config according to the command"
          },
          "minVersion": {
            "type": "string",
            "description": "The minimum version of agent this object can work"
          },
          "maxVersion": {
            "type": "string",
            "description": "the maximum version of agent this object can work"
          },
          "agentGroups": {
            "type": "array",
            "description": "The Agent Group",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "hostName": {
            "type": "string",
            "description": "The hostName"
          },
          "isServer": {
            "type": "boolean",
            "description": "The agent is a server or not"
          },
          "collectorVersion": {
            "type": "string",
            "description": "The agent version"
          },
          "isolatedGroupId": {
            "type": "integer",
            "description": "The isolated agent group id. Only if the agent is in isolated state.",
            "format": "int64"
          }
        }
      },
      "FIMProfileObject": {
        "title": "FIMProfileObject",
        "required": [
          "objectId",
          "objectType",
          "command",
          "name"
        ],
        "type": "object",
        "properties": {
          "objectId": {
            "type": "integer",
            "description": "The object id",
            "format": "int64"
          },
          "objectType": {
            "type": "string",
            "description": "Object Type. The objectType should be FIMProfile."
          },
          "command": {
            "type": "string",
            "description": "Could be Create, Update, Delete, agent will do the modification to config according to the command"
          },
          "minVersion": {
            "type": "string",
            "description": "The minimum version of agent this object can work"
          },
          "maxVersion": {
            "type": "string",
            "description": "the maximum version of agent this object can work"
          },
          "name": {
            "type": "string",
            "description": "The profile name"
          },
          "description": {
            "type": "string",
            "description": "The profile description"
          },
          "profileType": {
            "type": "string",
            "description": "The profile type"
          }
        }
      },
      "PolicyObject": {
        "title": "PolicyObject",
        "required": [
          "objectId",
          "objectType",
          "command",
          "name",
          "simulation",
          "enabled",
          "policyType",
          "rules",
          "eventTypes"
        ],
        "type": "object",
        "properties": {
          "objectId": {
            "type": "integer",
            "description": "The object id",
            "format": "int64"
          },
          "objectType": {
            "type": "string",
            "description": "Object Type. The objectType should be Policy."
          },
          "command": {
            "type": "string",
            "description": "Could be Create, Update, Delete, agent will do the modification to config according to the command"
          },
          "minVersion": {
            "type": "string",
            "description": "The minimum version of agent this object can work"
          },
          "maxVersion": {
            "type": "string",
            "description": "the maximum version of agent this object can work"
          },
          "name": {
            "type": "string",
            "description": "The policy name"
          },
          "description": {
            "type": "string",
            "description": "The policy description"
          },
          "simulation": {
            "type": "boolean",
            "description": "Is policy is simulation or not"
          },
          "enabled": {
            "type": "boolean",
            "description": "Is policy is enabled or not"
          },
          "policyType": {
            "type": "string",
            "description": "The policy type"
          },
          "rules": {
            "type": "array",
            "description": "The rules that associated with the policy",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "eventTypes": {
            "type": "integer",
            "description": "The event type of this policy",
            "format": "int64"
          }
        }
      },
      "RuleObject": {
        "title": "RuleObject",
        "required": [
          "objectId",
          "objectType",
          "command",
          "ruleName",
          "enabled",
          "severity",
          "action",
          "policy",
          "useStackType",
          "priority"
        ],
        "type": "object",
        "properties": {
          "objectId": {
            "type": "integer",
            "description": "The object id",
            "format": "int64"
          },
          "contentId": {
            "type": "integer",
            "description": "Alert type enum + offset(1000)",
            "format": "int64"
          },
          "objectType": {
            "type": "string",
            "description": "Object Type. The objectType should be Rule."
          },
          "command": {
            "type": "string",
            "description": "Could be Create, Update, Delete, agent will do the modification to config according to the command"
          },
          "minVersion": {
            "type": "string",
            "description": "The minimum version of agent this object can work"
          },
          "maxVersion": {
            "type": "string",
            "description": "the maximum version of agent this object can work"
          },
          "ruleName": {
            "type": "string",
            "description": "The rule name"
          },
          "description": {
            "type": "string",
            "description": "The rule description"
          },
          "enabled": {
            "type": "boolean",
            "description": "Is rule is enabled or not"
          },
          "severity": {
            "type": "string",
            "description": "The rule's severity"
          },
          "action": {
            "type": "string",
            "description": "The rule's action. Block or Log."
          },
          "policy": {
            "type": "integer",
            "description": "The rule is associated with which policy",
            "format": "int64"
          },
          "useStackType": {
            "type": "boolean",
            "description": "Indicates if the stack type is relevant for alert"
          },
          "priority": {
            "type": "integer",
            "description": "The priority of the rule",
            "format": "int64"
          }
        }
      },
      "AgentGroupObject": {
        "title": "AgentGroupObject",
        "required": [
          "objectId",
          "objectType",
          "command",
          "name",
          "securityPolicies",
          "fimPolicies"
        ],
        "type": "object",
        "properties": {
          "objectId": {
            "type": "integer",
            "description": "The object id",
            "format": "int64"
          },
          "objectType": {
            "type": "string",
            "description": "Object Type. The objectType should be AgentGroup."
          },
          "command": {
            "type": "string",
            "description": "Could be Create, Update, Delete, agent will do the modification to config according to the command"
          },
          "minVersion": {
            "type": "string",
            "description": "The minimum version of agent this object can work"
          },
          "maxVersion": {
            "type": "string",
            "description": "the maximum version of agent this object can work"
          },
          "name": {
            "type": "string",
            "description": "The agent group name"
          },
          "description": {
            "type": "string",
            "description": "The agent group description"
          },
          "securityPolicies": {
            "type": "array",
            "description": "The policies which are associated with the agent group",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "fimPolicies": {
            "type": "integer",
            "description": "The fim policy which is associated with the agent group",
            "format": "int64"
          },
          "winTargetVersion": {
            "type": "string",
            "description": "Windows target version"
          },
          "osxTargetVersion": {
            "type": "string",
            "description": "Osx target version"
          },
          "linuxTargetVersion": {
            "type": "string",
            "description": "Linux target version"
          }
        }
      },
      "FIMRuleObject": {
        "title": "FIMRuleObject",
        "required": [
          "objectId",
          "objectType",
          "command",
          "name",
          "operatingSystems",
          "profileId",
          "enabled",
          "eventTypes",
          "sourceAttributes",
          "targetAttributes",
          "excludeSource",
          "excludeTarget"
        ],
        "type": "object",
        "properties": {
          "objectId": {
            "type": "integer",
            "description": "The object id",
            "format": "int64"
          },
          "objectType": {
            "type": "string",
            "description": "Object Type. The objectType should be FIMRule."
          },
          "command": {
            "type": "string",
            "description": "Could be Create, Update, Delete, agent will do the modification to config according to the command"
          },
          "minVersion": {
            "type": "string",
            "description": "The minimum version of agent this object can work"
          },
          "maxVersion": {
            "type": "string",
            "description": "the maximum version of agent this object can work"
          },
          "name": {
            "type": "string",
            "description": "The FIM rule name"
          },
          "description": {
            "type": "string",
            "description": "The FIM rule description"
          },
          "operatingSystems": {
            "type": "array",
            "description": "The OS setting of the FIM rule",
            "items": {
              "type": "string"
            }
          },
          "profileId": {
            "type": "integer",
            "description": "The profile id that the FIM rule belongs",
            "format": "int64"
          },
          "enabled": {
            "type": "boolean",
            "description": "Enabled/Disabled of the FIM rule.",
            "example": true
          },
          "eventTypes": {
            "type": "array",
            "description": "The event types of the FIM rule",
            "items": {
              "type": "string"
            }
          },
          "sourceAttributes": {
            "type": "array",
            "description": "The inclusion source attributes.",
            "items": {
              "$ref": "#/components/schemas/InclusionSourceAttributes"
            }
          },
          "targetAttributes": {
            "type": "array",
            "description": "The inclusion target attributes.",
            "items": {
              "$ref": "#/components/schemas/InclusionTargetAttributes"
            }
          },
          "excludeSource": {
            "type": "array",
            "description": "The exclusion source attributes.",
            "items": {
              "$ref": "#/components/schemas/ExclusionSourceAttributes"
            }
          },
          "excludeTarget": {
            "type": "array",
            "description": "The exclusion source attributes.",
            "items": {
              "$ref": "#/components/schemas/ExclusionTargetAttributes"
            }
          }
        }
      },
      "InclusionSourceAttributes": {
        "title": "InclusionSourceAttributes",
        "required": [
          "name",
          "value"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The attribute name"
          },
          "value": {
            "type": "string",
            "description": "The attribute value"
          }
        }
      },
      "InclusionTargetAttributes": {
        "title": "InclusionTargetAttributes",
        "required": [
          "name",
          "value"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The attribute name"
          },
          "value": {
            "type": "string",
            "description": "The attribute value"
          }
        }
      },
      "ExclusionSourceAttributes": {
        "title": "ExclusionSourceAttributes",
        "required": [
          "name",
          "value"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The attribute name"
          },
          "value": {
            "type": "string",
            "description": "The attribute value"
          }
        }
      },
      "ExclusionTargetAttributes": {
        "title": "ExclusionTargetAttributes",
        "required": [
          "name",
          "value"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The attribute name"
          },
          "value": {
            "type": "string",
            "description": "The attribute value"
          }
        }
      },
      "ProfileObject": {
        "title": "ProfileObject",
        "required": [
          "objectId",
          "objectType",
          "command",
          "policy",
          "os",
          "applicationControlModels"
        ],
        "type": "object",
        "properties": {
          "objectId": {
            "type": "integer",
            "description": "The object id",
            "format": "int64"
          },
          "objectType": {
            "type": "string",
            "description": "Object Type. The objectType should be Profile."
          },
          "command": {
            "type": "string",
            "description": "Could be Create, Update, Delete, agent will do the modification to config according to the command"
          },
          "minVersion": {
            "type": "string",
            "description": "The minimum version of agent this object can work"
          },
          "maxVersion": {
            "type": "string",
            "description": "the maximum version of agent this object can work"
          },
          "policy": {
            "type": "integer",
            "description": "The policy id",
            "format": "int64"
          },
          "os": {
            "type": "string",
            "description": "The operation system"
          },
          "applicationControlModels": {
            "type": "array",
            "description": "The application control model object id",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          }
        }
      },
      "ApplicationControlModelObject": {
        "title": "ApplicationControlModelObject",
        "required": [
          "objectId",
          "objectType",
          "command",
          "policyId"
        ],
        "type": "object",
        "properties": {
          "objectId": {
            "type": "integer",
            "description": "The object id",
            "format": "int64"
          },
          "objectType": {
            "type": "string",
            "description": "Object Type. The objectType should be applicationControlModel."
          },
          "command": {
            "type": "string",
            "description": "Could be Create, Update, Delete, agent will do the modification to config according to the command"
          },
          "minVersion": {
            "type": "string",
            "description": "The minimum version of agent this object can work"
          },
          "maxVersion": {
            "type": "string",
            "description": "the maximum version of agent this object can work"
          },
          "policyId": {
            "type": "integer",
            "description": "The policy id",
            "format": "int64"
          },
          "path": {
            "type": "string",
            "description": "Specifies the path of application"
          },
          "singerName": {
            "type": "string",
            "description": "The singer name."
          },
          "fileName": {
            "type": "string",
            "description": "The file name."
          },
          "hash": {
            "type": "string",
            "description": "The hash data."
          }
        }
      },
      "GetAggregatorsResponse": {
        "title": "GetAggregatorsResponse",
        "type": "object",
        "properties": {
          "hostName": {
            "type": "string",
            "description": "Aggregator host name"
          },
          "id": {
            "type": "integer",
            "description": "Aggregator id",
            "format": "int64"
          },
          "ipAddress": {
            "type": "string",
            "description": "Aggregator ip"
          },
          "numOfAgents": {
            "type": "integer",
            "description": "Aggregator number of agents",
            "format": "int64"
          },
          "numOfDownAgents": {
            "type": "integer",
            "description": "Aggregator number of agents down",
            "format": "int64"
          },
          "state": {
            "type": "string",
            "description": "Aggregator state"
          },
          "version": {
            "type": "string",
            "description": "Aggregator version"
          }
        }
      },
      "GetAgentInstallersResponse": {
        "title": "GetAgentInstallersResponse",
        "type": "object",
        "properties": {
          "availableAgentInstallers": {
            "type": "array",
            "description": "available agent installers",
            "items": {
              "$ref": "#/components/schemas/AgentInstallerResponse"
            }
          }
        }
      },
      "AgentInstallerResponse": {
        "title": "AgentInstallerResponse",
        "type": "object",
        "properties": {
          "osFamily": {
            "type": "string",
            "description": "OS"
          },
          "version": {
            "type": "string",
            "description": "version"
          }
        }
      },
      "SetTargetVersionBodyRequest": {
        "title": "SetTargetVersionBodyRequest",
        "required": [
          "groupIds",
          "updateVersions"
        ],
        "type": "object",
        "properties": {
          "groupIds": {
            "type": "array",
            "description": "List of group ids that should be applied with the target installer version",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "updateVersions": {
            "type": "array",
            "description": "List of installer versions that should be applied in the agent\ngroups",
            "items": {
              "$ref": "#/components/schemas/AgentInstallerRequest"
            }
          }
        }
      },
      "SetTargetVersionRequest": {
        "title": "SetTargetVersionRequest",
        "required": [
          "updateVersions"
        ],
        "type": "object",
        "properties": {
          "updateVersions": {
            "type": "array",
            "description": "List of installer versions that should be applied in the agent\ngroups",
            "items": {
              "$ref": "#/components/schemas/AgentInstallerRequest"
            }
          }
        }
      },
      "CreateCustomAgentInstallerRequest": {
        "title": "CreateCustomAgentInstallerRequest",
        "type": "object",
        "properties": {
          "updateVersions": {
            "type": "array",
            "description": "List of installer versions that should be applied in the agent\ngroups",
            "items": {
              "$ref": "#/components/schemas/AgentInstallerRequest"
            }
          },
          "aggentGroupId": {
            "type": "integer",
            "description": "Specifies the aggent group ID",
            "format": "int64"
          },
          "email": {
            "type": "string",
            "description": "Send installer link to this email"
          }
        }
      },
      "AgentInstallerRequest": {
        "title": "AgentInstallerRequest",
        "required": [
          "osFamily",
          "version"
        ],
        "type": "object",
        "properties": {
          "osFamily": {
            "type": "string",
            "description": "OS",
            "enum": [
              "Windows",
              "macOS",
              "Linux"
            ]
          },
          "version": {
            "type": "string",
            "description": "version"
          }
        }
      },
      "UpdateLicenseRequest": {
        "title": "UpdateLicenseRequest",
        "type": "object",
        "properties": {
          "licenseBlob": {
            "type": "string",
            "description": "License blob"
          }
        }
      },
      "GetLicensingResponse": {
        "title": "GetLicensingResponse",
        "required": [
          "contentVersion",
          "installationId",
          "licenseExpirationDate",
          "licenseType",
          "serversInUse",
          "serversLicenseCapacity",
          "workstationsLicenseCapacity",
          "workstationsInUse",
          "iotInUse",
          "iotLicenseCapacity",
          "automaticallyUpgrade"
        ],
        "type": "object",
        "properties": {
          "contentVersion": {
            "type": "string",
            "description": "Specifies the content version"
          },
          "installationId": {
            "type": "integer",
            "description": "Specifies the installation ID",
            "format": "int64"
          },
          "licenseBlob": {
            "type": "string",
            "description": "License blob"
          },
          "licenseExpirationDate": {
            "type": "string",
            "description": "Specifies the license expiration date"
          },
          "licenseType": {
            "type": "string",
            "description": "Specifies the license type. Possible values are (separated\nby ;): Discover, Protect and Response; Discover, Protect and Response\n[On-Premise]; Discover and Protect; Protect and Response"
          },
          "serversInUse": {
            "type": "integer",
            "description": "Specifies the servers in use",
            "format": "int64"
          },
          "serversLicenseCapacity": {
            "type": "integer",
            "description": "Specifies the license capacity of server.",
            "format": "int64"
          },
          "workstationsLicenseCapacity": {
            "type": "integer",
            "description": "Specifies the  license capacity of workstation",
            "format": "int64"
          },
          "workstationsInUse": {
            "type": "integer",
            "description": "Specifies the workstations in use",
            "format": "int64"
          },
          "iotInUse": {
            "type": "integer",
            "description": "Specifies the IoT devices in use",
            "format": "int64"
          },
          "iotLicenseCapacity": {
            "type": "integer",
            "description": "Specifies the  license capacity of IoT",
            "format": "int64"
          },
          "automaticallyUpgrade": {
            "type": "boolean",
            "description": "Automatically upgrade agents to the latest patch version.",
            "example": false
          }
        }
      },
      "ApplicationWhitelistingUploadRequest": {
        "title": "ApplicationWhitelistingUploadRequest",
        "required": [
          "state",
          "createdTime",
          "creator",
          "csvFile"
        ],
        "type": "object",
        "properties": {
          "policyIds": {
            "type": "array",
            "description": "List of associated application whitelisting policy Ids, for example [1,2,3].",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "policyNames": {
            "type": "array",
            "description": "List of associated application whitelisting policy Names",
            "items": {
              "type": "string"
            }
          },
          "state": {
            "type": "boolean",
            "description": "Enabled/Disabled.",
            "example": true
          },
          "createdTime": {
            "type": "string",
            "description": "The created time"
          },
          "creator": {
            "type": "string",
            "description": "The creator of the application."
          },
          "csvFile": {
            "type": "string",
            "description": "The CSV file to upload, each row should contain applicationName, os, option, hashName, fileName, path, signer,  signerName, and thumbprint"
          }
        }
      },
      "ApplicationWhitelistingCreateResponse": {
        "title": "ApplicationWhitelistingCreateResponse",
        "required": [
          "applicationId"
        ],
        "type": "object",
        "properties": {
          "applicationId": {
            "type": "integer",
            "description": "Specifies the application ID",
            "format": "int64"
          }
        }
      },
      "ApplicationWhitelistingUploadResponse": {
        "title": "ApplicationWhitelistingUploadResponse",
        "required": [
          "applicationId",
          "applicationName"
        ],
        "type": "object",
        "properties": {
          "applicationId": {
            "type": "integer",
            "description": "Specifies the application ID",
            "format": "int64"
          },
          "applicationName": {
            "type": "string",
            "description": "Application name."
          }
        }
      },
      "GetApplicationWhitelistingResponse": {
        "title": "GetApplicationWhitelistingResponse",
        "required": [
          "applicationName",
          "applicationId",
          "state",
          "os",
          "option",
          "signer",
          "createdTime",
          "creator"
        ],
        "type": "object",
        "properties": {
          "applicationName": {
            "type": "string",
            "description": "Application name."
          },
          "applicationId": {
            "type": "integer",
            "format": "int64",
            "description": "The application Id"
          },
          "policyIds": {
            "type": "array",
            "description": "List of associated application whitelisting policy Ids, for example [1,2,3].",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "policyNames": {
            "type": "array",
            "description": "List of associated application whitelisting policy Names",
            "items": {
              "type": "string"
            }
          },
          "state": {
            "type": "boolean",
            "description": "Enabled/Disabled.",
            "example": true
          },
          "os": {
            "type": "string",
            "description": "The OS of the device"
          },
          "option": {
            "type": "string",
            "description": "Select option (hash or attribute)",
            "enum": [
              "Hash",
              "Attribute"
            ]
          },
          "hashName": {
            "type": "string",
            "description": "The process hash name."
          },
          "fileName": {
            "type": "string",
            "description": "The file name."
          },
          "path": {
            "type": "string",
            "description": "The path."
          },
          "signer": {
            "type": "string",
            "description": "Select signer (Certificate or Thumbprint or Name)",
            "enum": [
              "Certificate",
              "Thumbprint",
              "Name"
            ]
          },
          "signerCertificate": {
            "type": "string",
            "format": "binary",
            "description": "X.509 certificate file (required if signer is 'Certificate')"
          },
          "thumbprint": {
            "type": "string",
            "description": "A SHA-1 thumbprint of the certificate (required if signer is 'Thumbprint')"
          },
          "signerName": {
            "type": "string",
            "description": "Name of the signer (required if signer is 'Name')"
          },
          "lastUpdatedTime": {
            "type": "string",
            "description": "Last updated time"
          },
          "updatedUser": {
            "type": "string",
            "description": "updated by user"
          },
          "createdTime": {
            "type": "string",
            "description": "The created time"
          },
          "creator": {
            "type": "string",
            "description": "The creator of the application."
          }
        }
      },
      "ApplicationWhitelistingCreateRequest": {
        "title": "ApplicationWhitelistingCreateRequest",
        "required": [
          "applicationName",
          "state",
          "os",
          "option",
          "signer",
          "createdTime",
          "creator"
        ],
        "type": "object",
        "properties": {
          "applicationName": {
            "type": "string",
            "description": "Application name."
          },
          "policyIds": {
            "type": "array",
            "description": "List of associated application whitelisting policy Ids, for example [1,2,3].",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "policyNames": {
            "type": "array",
            "description": "List of associated application whitelisting policy Names",
            "items": {
              "type": "string"
            }
          },
          "state": {
            "type": "boolean",
            "description": "Enabled/Disabled.",
            "example": true
          },
          "os": {
            "type": "string",
            "description": "The OS of the device"
          },
          "option": {
            "type": "string",
            "description": "Select option (hash or attribute)",
            "enum": [
              "Hash",
              "Attribute"
            ]
          },
          "hashName": {
            "type": "string",
            "description": "The process hash name."
          },
          "fileName": {
            "type": "string",
            "description": "The file name."
          },
          "path": {
            "type": "string",
            "description": "The path."
          },
          "signer": {
            "type": "string",
            "description": "Select signer (Certificate or Thumbprint or Name)",
            "enum": [
              "Certificate",
              "Thumbprint",
              "Name"
            ]
          },
          "signerCertificate": {
            "type": "string",
            "format": "binary",
            "description": "X.509 certificate file (required if signer is 'Certificate')"
          },
          "thumbprint": {
            "type": "string",
            "description": "A SHA-1 thumbprint of the certificate (required if signer is 'Thumbprint')"
          },
          "signerName": {
            "type": "string",
            "description": "Name of the signer (required if signer is 'Name')"
          },
          "createdTime": {
            "type": "string",
            "description": "The created time"
          },
          "creator": {
            "type": "string",
            "description": "The creator of the application."
          }
        }
      },
      "ApplicationWhitelistingUpdateRequest": {
        "title": "ApplicationWhitelistingUpdateRequest",
        "required": [
          "applicationName",
          "state",
          "os",
          "option",
          "signer",
          "lastUpdatedTime",
          "updatedUser"
        ],
        "type": "object",
        "properties": {
          "applicationName": {
            "type": "string",
            "description": "Application name."
          },
          "policyIds": {
            "type": "array",
            "description": "List of associated application whitelisting policy Ids, for example [1,2,3].",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "policyNames": {
            "type": "array",
            "description": "List of associated application whitelisting policy Names",
            "items": {
              "type": "string"
            }
          },
          "state": {
            "type": "boolean",
            "description": "Enabled/Disabled.",
            "example": true
          },
          "os": {
            "type": "string",
            "description": "The OS of the device"
          },
          "option": {
            "type": "string",
            "description": "Select option (hash or attribute)",
            "enum": [
              "Hash",
              "Attribute"
            ]
          },
          "hashName": {
            "type": "string",
            "description": "The process hash name."
          },
          "fileName": {
            "type": "string",
            "description": "The file name."
          },
          "path": {
            "type": "string",
            "description": "The path."
          },
          "signer": {
            "type": "string",
            "description": "Select signer (Certificate or Thumbprint or Name)",
            "enum": [
              "Certificate",
              "Thumbprint",
              "Name"
            ]
          },
          "signerCertificate": {
            "type": "string",
            "format": "binary",
            "description": "X.509 certificate file (required if signer is 'Certificate')"
          },
          "thumbprint": {
            "type": "string",
            "description": "A SHA-1 thumbprint of the certificate (required if signer is 'Thumbprint')"
          },
          "signerName": {
            "type": "string",
            "description": "Name of the signer (required if signer is 'Name')"
          },
          "lastUpdatedTime": {
            "type": "string",
            "description": "Last updated time"
          },
          "updatedUser": {
            "type": "string",
            "description": "updated by user"
          }
        }
      },
      "LogForwardingProfileCreateRequest": {
        "title": "LogForwardingProfileCreateRequest",
        "required": [
          "profileName"
        ],
        "type": "object",
        "properties": {
          "profileName": {
            "type": "string",
            "description": "Log forwarding profile name."
          },
          "agentGroupIds": {
            "type": "array",
            "description": "List of associated agent groups Ids, for example [1,2,3].",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "forwardingEventType": {
            "type": "array",
            "description": "List of event type, for example [1,2,3]. 1 indicates malicious. 2 indicates suspicious. 3 indicates suspicious.",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "scheduled": {
            "type": "string",
            "description": "The scheduled forwarding period."
          },
          "logServerIds": {
            "type": "array",
            "description": "List of log server Ids.",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          }
        }
      },
      "LogForwardingProfileCreateResponse": {
        "title": "LogForwardingProfileCreateResponse",
        "required": [
          "profileId"
        ],
        "type": "object",
        "properties": {
          "profileId": {
            "type": "integer",
            "description": "Specifies the profile ID",
            "format": "int64"
          }
        }
      },
      "LogForwardingProfileUpdateRequest": {
        "title": "LogForwardingProfileUpdateRequest",
        "required": [
          "profileName",
          "agentGroupIds",
          "forwardingEventType",
          "scheduled"
        ],
        "type": "object",
        "properties": {
          "profileName": {
            "type": "string",
            "description": "Log forwarding profile name."
          },
          "agentGroupIds": {
            "type": "array",
            "description": "List of associated agent groups Ids, for example [1,2,3].",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "forwardingEventType": {
            "type": "array",
            "description": "List of event type, for example [1,2,3]. 1 indicates malicious. 2 indicates suspicious. 3 indicates suspicious.",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "scheduled": {
            "type": "string",
            "description": "The scheduled forwarding period."
          }
        }
      },
      "LogForwardingProfileResponse": {
        "title": "LogForwardingProfileResponse",
        "required": [
          "profileName",
          "profileId",
          "agentGroupIds",
          "agentGroupNames",
          "logServerIds",
          "logServerNames",
          "forwardingEventType",
          "scheduled"
        ],
        "type": "object",
        "properties": {
          "profileName": {
            "type": "string",
            "description": "Log forwarding profile name."
          },
          "profileId": {
            "type": "integer",
            "description": "Profile id",
            "format": "int64"
          },
          "agentGroupIds": {
            "type": "array",
            "description": "List of associated agent groups Ids, for example [1,2,3].",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "agentGroupNames": {
            "type": "array",
            "description": "List of associated agent groups Names.",
            "items": {
              "type": "string"
            }
          },
          "logServerIds": {
            "type": "array",
            "description": "List of log server Ids.",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "logServerNames": {
            "type": "array",
            "description": "List of log server names.",
            "items": {
              "type": "string"
            }
          },
          "forwardingEventType": {
            "type": "array",
            "description": "List of event type, for example [1,2,3]. 1 indicates malicious. 2 indicates suspicious. 3 indicates suspicious.",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "scheduled": {
            "type": "string",
            "description": "The scheduled forwarding period."
          }
        }
      },
      "PostAgentRegisterRequest": {
        "title": "PostAgentRegisterRequest",
        "required": [
          "protocolVersion",
          "version",
          "buildInfo",
          "hostName",
          "os",
          "arch",
          "uuid",
          "id",
          "serial",
          "mac",
          "isVdi",
          "isServer",
          "loggedUsers",
          "capabilitiesVector",
          "osVersion",
          "osBuildVersion",
          "localAddress",
          "serverCertificateThumbprint"
        ],
        "type": "object",
        "properties": {
          "protocolVersion": {
            "type": "integer",
            "description": "Specifies the protocol version",
            "example": 1,
            "format": "int64"
          },
          "version": {
            "type": "string",
            "description": "The version",
            "example": "5.2.0.5005"
          },
          "buildInfo": {
            "type": "string",
            "description": "The build information",
            "example": "16676594383f79b55a49fd68a0faab621d8f7ca9 Thu, 25 May 2023 15:57:36 +0800"
          },
          "hostName": {
            "type": "string",
            "description": "The host name",
            "example": "Win10-host1"
          },
          "os": {
            "type": "string",
            "description": "The operation system",
            "example": "Windows 10 Home"
          },
          "arch": {
            "type": "string",
            "description": "The architecture. For example, x86",
            "example": "x86"
          },
          "uuid": {
            "type": "integer",
            "description": "Specifies the uuid of agent",
            "example": 5844531226299926000,
            "format": "int64"
          },
          "id": {
            "type": "integer",
            "description": "Specifies the agent ID",
            "example": 178729,
            "format": "int64"
          },
          "serial": {
            "type": "integer",
            "description": "Specifies the serial number",
            "example": 2696430247,
            "format": "int64"
          },
          "mac": {
            "type": "array",
            "description": "The MAC address",
            "example": [
              209296443244552
            ],
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "isVdi": {
            "type": "boolean",
            "description": "Always false for FortiOT",
            "example": false
          },
          "isServer": {
            "type": "boolean",
            "description": "Is server or not",
            "example": false
          },
          "loggedUsers": {
            "type": "array",
            "description": "The logged users",
            "items": {
              "$ref": "#/components/schemas/AgentRegisterLoggedUserRequest"
            }
          },
          "capabilitiesVector": {
            "type": "array",
            "description": "Specifies the capabilities vector",
            "example": [
              12582911,
              0
            ],
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "osVersion": {
            "type": "string",
            "description": "The os version. For example, 10.0.19041 build 2913",
            "example": "10.0.19045"
          },
          "osBuildVersion": {
            "type": "string",
            "description": "The os build version",
            "example": "10.0.19041 build 2913"
          },
          "localAddress": {
            "type": "string",
            "description": "The local address",
            "example": "172.23.128.45"
          },
          "serverCertificateThumbprint": {
            "type": "string",
            "description": "The server certificate thumbprint",
            "example": "88CF5F2B4018E2F84D71A565DC31D8C49E23AAAC"
          }
        }
      },
      "AgentRegisterLoggedUserRequest": {
        "title": "AgentRegisterLoggedUserRequest",
        "required": [
          "name",
          "logonTime",
          "isActive"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The logged user name",
            "example": "WIN10\\admin"
          },
          "logonTime": {
            "type": "integer",
            "description": "The user logon time",
            "example": 1686841468,
            "format": "int64"
          },
          "isActive": {
            "type": "boolean",
            "description": "Is active or not",
            "example": true
          }
        }
      },
      "PostAgentRegisterResponse": {
        "title": "PostAgentRegisterResponse",
        "required": [
          "base64AESSecret",
          "base64ClientCertificate",
          "base64PrivateKey",
          "base64RootCertificate",
          "id",
          "token"
        ],
        "type": "object",
        "properties": {
          "base64AESSecret": {
            "type": "string",
            "description": "The base64 AES Secret",
            "example": "DXT3WUBCT4d+bRE21+vtExxx"
          },
          "base64ClientCertificate": {
            "type": "string",
            "description": "The base64 client certificate.The base64ClientCertificate should be ASN.1 DER encoded and then be Base64 encoded.",
            "example": "MIICpDCCAYygAwIBAgIGAYiM5anYMA0GCSqGSIb3DQEBBQUAMBUxEzARBgNVBAMMCmVuc2lsby5jb20wHhcNMjMwNjA1MDAwMDAwWhcNMzMwNjAyMDAwMDAwWjARMQ8wDQYDVQQDDAYxNzg3MjkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC6UnfUegjDjMOWBF8xaEIIoelB2m/5dJmUVjEXGaedDgtKGGW1vj2a6+i3Ceo2kF2sgfOu+3IfOX+dS2PIZuggeZIlGriCqKMazziH9QKOB9DrGQdoCLIuiVWD4HkV57TAOp5GTwNDtZ/7Fto97kK9luZ3193CM8e/cbLGxGnJlTI2sIh+4O12NCBCRAkXYuiLz/iRrEAsN9kLq0lyE6C9c4WRmWv4xD4nnfiuGerjCVNm5M9LVDbUe6/LbDv5hPrXS/ToI984i+gyu7qpEm8Da9uipxosNR314i67Q1nmrgblyNohThSAx3z9YZt3SOhddzc7LRo4p6eHWf5L5OeXAgMBAAEwDQYJKoZIhvcNAQEFBQADggEBAELAP2ZpN9yVqHATelFHMbQLT8wns4C6/K5LuRQz2bg4r6iUsVZ2jgZNBVxnnJnMLwaJRya/eYPXblx7I+Nc63BA1ZDSgsSxnU48lNvT7j+v0uOduJpQ7dctuVlxjmYGqJa1bqnfFlSiPNYnbvnLdC2ukUCpMZZmKkaj52FoxKILF6rlr7hWJJfP9kVVINsh964z0uBywhRlwl1g/pdqNKiG37Xxq7Izk8idDCAeeYmv1Zl7Up7wz0JHIwGrrIvoY/kfh1CWPhYrh/nuJ6tRHes8loN8/DVJRPdycJ/CbbcjL6IkXUthxh2Rjf+9QNE/rRauZJGzUwdA+ZB46atZpxxx"
          },
          "base64PrivateKey": {
            "type": "string",
            "description": "The base64 private key.The base64PrivateKey should be ASN.1 DER encoded and then be Base64 encoded.",
            "example": "MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC6UnfUegjDjMOWBF8xaEIIoelB2m/5dJmUVjEXGaedDgtKGGW1vj2a6+i3Ceo2kF2sgfOu+3IfOX+dS2PIZuggeZIlGriCqKMazziH9QKOB9DrGQdoCLIuiVWD4HkV57TAOp5GTwNDtZ/7Fto97kK9luZ3193CM8e/cbLGxGnJlTI2sIh+4O12NCBCRAkXYuiLz/iRrEAsN9kLq0lyE6C9c4WRmWv4xD4nnfiuGerjCVNm5M9LVDbUe6/LbDv5hPrXS/ToI984i+gyu7qpEm8Da9uipxosNR314i67Q1nmrgblyNohThSAx3z9YZt3SOhddzc7LRo4p6eHWf5L5OeXAgMBAAECggEATXe5Y+oDV87giTCzJZc8EVvEYIGCWf0NV9wIWBruEkJDFmETdN+uvImGfggMzffzQqTbXS8lkW72LL+qMqn6rHnvdibofUbBXgW3cuu/Tq9YQU9sQWiQMQIfwI+luKJYiC43HXN/n3jWFe83+VTlge9KTpy9kp+11tbepn8Gnu2INC81RvdkUC6BzgQDbSQ2vbzCTb5sqBa93D7OdgYhqFeD42Lfr/vRt3LWLRAuRMSXQqNeFE1KIY/uJx4PnX+OzyvUMqgHe5t+3enUL5FiBUrhsniOPl+ru5j5Ka/HHEj64Jo9T8+a7jIbGCDDh6j/e11NExfOg/ESXXYltsw2JQKBgQDS2S3VDef6Hr9C9pc9JRr7xfLKidU/wTMg8qvZtNYCzAvuD1Z4i33CMaUBvBRt9taqpK41GlWuhxOwrJaO/QlKCE0hwOZS6EQTVERzRUuTB3N06RUknDv3bAwLMdFGKLxj1991DLd3dW9XRvpgO74x8W0fz1cBqC4Czl6s5HEqGwKBgQDiOL+qYM+7ZMVbOLB65OkY8asRATRvm56qkabUhpuaW+oO5s3zDDXwDqN81axfh+Sy+m/BPEdmmWIUlAV3SdvehJJPF6lOvfoaJNxlfgo3TVicagBc2hFcSOaiTpdTV0Y7mH8WHWgFdSj2fH0w1A0Cu/vOk/fdhOGDBu1kltiQNQKBgEzryGmysg+wyev/FDvNXqO9mo7DbBXfQOzjO0ioTW8ly7BkzhIaKZ4ACIeyeu2HINeOTrO20M1kIA3TWPX/YDUvBBytSBm0/KjklDhNbn3MORXMttbtXH8uXtJysTtcPyZZqf8EzaX6JM19anhTM1b7EemJ9d734RlK+oUurg5DAoGBAMPlwJQaIcl1CjJkdO73K6OeIzUmhfHgIRYz6vQ/XJ/e2GDvHYlLGao4AvsnTY2scC9ND1mWiX4fdP+87r7OBsg6pTg4lTTK7rmVEgYRj2c0Y3ePk6DUdhQkTRRgWkqhWQBinirYbCvNuRs50m9mMZ4ci4HoQMxjNaXxacGhnwfBAoGAYiXP7z3vtxB5HFocVAM5jawqonRmpB7m5/WdWYp/lfevGbglf1wpi/YyCRF/oy6DiM3ZZha9SocR/IfyjNjBZP/M+yxJFFThYKS3K+0SWoiDE4X4HtbBNNMoufZoz3nAlPTTp/Jibp5IogsU2+YFaJaYEL+MGOHUyI+IGW6Dlxxx"
          },
          "base64RootCertificate": {
            "type": "string",
            "description": "The base64 root certificate.The base64RootCertificate should be ASN.1 DER encoded and then be Base64 encoded.",
            "example": "MIIC/TCCAeWgAwIBAgIJAJGW/8pieAI8MA0GCSqGSIb3DQEBCwUAMBUxEzARBgNVBAMMCmVuc2lsby5jb20wHhcNMjMwMjA2MjMxNzMwWhcNMzMwMjAzMjMxNzMwWjAVMRMwEQYDVQQDDAplbnNpbG8uY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEApz9sA0ssz96YCSz+cMNGUk3owjeaZSIiR8O1I6hEyo0ZE8iauoDBcCErMGNyMogUHOUlVPEJpAI8UumR3X8xAJ2YY9uA0vT+7bqI9mGXDtmXIciLmiHCE24wOFt2UbJos22fwpond8brBaPkSHLqlgotDf2Y145H6tzdejoEp1uRZepx0XJxz8MAb8RLlEC7fPR+ECVHMg9MF1Klx02DjgWPUdJleFwB65E8eygPB9Y2MfvK/n1fgwUw9/JBkiAmUKqDKfvooI60NI9ZbCVW4SGsTUFfs2A9CklphIXu0PwYAUeoRJGX9D9/GLCWZvm5g2TPJHO2UsFowL7GJjPcjQIDAQABo1AwTjAdBgNVHQ4EFgQU/+OEVSnTYGpdJJ4Sil2qOmrs4vowHwYDVR0jBBgwFoAU/+OEVSnTYGpdJJ4Sil2qOmrs4vowDAYDVR0TBAUwAwEB/zANBgkqhkiG9w0BAQsFAAOCAQEAO52sdR0hYU3aZ1IRMASIb25nymtjK/N0zTW0JEoUtqZLbILLEQp9flEbd+9eg2bbQ+uad2YL/Obw4wK7ySTj82WT2B1/zetgIPUy/Pddbv0oU3iJNXr/5SF4Vltw1loVmpLT11A+lECDaWv4wtHBItKHWH3rURf6nSZ0YdBY7dhJohJ6+/cr8OPGjeYXUP3tHLivqwx34C2c+8bHilPdwLphU2YNLbn2pwEHLUpKoCrpAY+NWxT9P6mN4/s8CMRBRqkuskM//LVxrGc9XtW+EZtA3cwD69jF69D8O1B3srBhmoPdl/AQsNyVDHzhkjNjXBCCZbOWjE6GKOzxAWIYKxxx"
          },
          "error": {
            "type": "string",
            "description": "The error",
            "example": null
          },
          "id": {
            "type": "integer",
            "description": "Agent id",
            "example": 178729,
            "format": "int64"
          },
          "token": {
            "type": "string",
            "description": "token = Base64(Header).Base64(Payload).Signature\n\nHeader:\n{\n\"typ\":\"JWT\",\n\"alg\":\"HS256\"\n}\n\nPayload:\n{\n\"userid\":111111111,\n\"username\":\"User1\",\n\"exp\":1300819380\n}\n\nSignature:\nHMACSHARE256(Base64(Header)+\".\"+Base64(Payload),secret)\n",
            "example": "xxxxxxxxxxxx"
          }
        }
      },
      "PostAgentStatusRequest": {
        "title": "PostAgentStatusRequest",
        "required": [
          "protocolVersion",
          "id",
          "status",
          "policyEngineVersion"
        ],
        "type": "object",
        "properties": {
          "protocolVersion": {
            "type": "integer",
            "description": "Specifies the protocol version",
            "example": 1,
            "format": "int64"
          },
          "id": {
            "type": "integer",
            "description": "Specifies the agent ID",
            "example": 178729,
            "format": "int64"
          },
          "status": {
            "type": "string",
            "description": "The agent status",
            "example": "Enabled"
          },
          "policyEngineVersion": {
            "type": "string",
            "description": "The policy engine version",
            "example": "5.2.0.5005"
          },
          "loggedUsers": {
            "type": "array",
            "description": "The logged users",
            "items": {
              "$ref": "#/components/schemas/AgentStatusLoggedUserRequest"
            }
          }
        }
      },
      "PostAgentEventRequest": {
        "title": "PostAgentEventRequest",
        "required": [
          "firstSeen",
          "lastSeen",
          "lastSeenTime",
          "alertNum",
          "action",
          "severity",
          "application",
          "os",
          "agentId",
          "eventId",
          "eventType",
          "eventClassification",
          "isSigned"
        ],
        "type": "object",
        "properties": {
          "firstSeen": {
            "type": "integer",
            "description": "The first time this event is generated",
            "format": "int64",
            "example": 1686815837
          },
          "lastSeen": {
            "type": "integer",
            "description": "The last time this event is generated",
            "format": "int64",
            "example": 1686815837
          },
          "count": {
            "type": "integer",
            "description": "Specifies the number of occurrences of the same event on the same device.",
            "format": "int32",
            "example": 1
          },
          "lastSeenTime": {
            "type": "string",
            "description": "The last time this event is generated",
            "example": "15 June 2023 07:57:17"
          },
          "alertNum": {
            "type": "integer",
            "description": "Count of event alerts",
            "format": "int32",
            "example": 1
          },
          "action": {
            "type": "string",
            "description": "The action of event (Block / Log / SimulationBlock / Ignore / Accept)",
            "example": "Block"
          },
          "severity": {
            "type": "string",
            "description": "The severity of event (Critical / High / Medium / Low / Debug / Internal / Unknown)",
            "example": "Medium"
          },
          "application": {
            "type": "string",
            "description": "The application path of the event",
            "example": "\\Device\\HarddiskVolume1\\temp\\test.txt"
          },
          "os": {
            "type": "string",
            "description": "The operating system of the agent",
            "example": "Windows"
          },
          "agentId": {
            "type": "integer",
            "description": "Specifies the agent ID",
            "format": "int64",
            "example": 178729
          },
          "eventId": {
            "type": "integer",
            "description": "Specifies the event ID",
            "format": "int64",
            "example": 892640825
          },
          "eventType": {
            "type": "integer",
            "description": "Bitmask of event type FILE_EXECUTE_ATTEMPT        = (1 << 13); DEVICE_CONTROL_MANAGEMENT   = (1 << 21); FIM_FILE                    = (1 << 25);",
            "format": "int64",
            "example": 33554432
          },
          "eventClassification": {
            "type": "string",
            "description": "Classification of the event (ClassificationMalicious / ClassificationProbablyMalicious / ClassificationPup / ClassificationProbablyGood / ClassificationGood)",
            "example": "ClassificationInconclusive"
          },
          "isSigned": {
            "type": "boolean",
            "description": "Whether the process of the event is signed",
            "example": true
          },
          "stackInfos": {
            "type": "array",
            "description": "The stack informations",
            "items": {
              "$ref": "#/components/schemas/PostAgentEventStackInfos"
            }
          },
          "alerts": {
            "type": "array",
            "description": "The alert informations",
            "items": {
              "$ref": "#/components/schemas/PostAgentEventAlerts"
            }
          }
        }
      },
      "PostAgentEventResponse": {
        "title": "PostAgentEventResponse",
        "required": [
          "firstSeen",
          "lastSeen",
          "lastSeenTime",
          "alertNum",
          "action",
          "severity",
          "application",
          "os",
          "agentId",
          "eventId",
          "eventType",
          "eventClassification",
          "isSigned"
        ],
        "type": "object",
        "properties": {
          "firstSeen": {
            "type": "integer",
            "description": "The first time this event is generated",
            "format": "int64",
            "example": 1686815837
          },
          "lastSeen": {
            "type": "integer",
            "description": "The last time this event is generated",
            "format": "int64",
            "example": 1686815837
          },
          "count": {
            "type": "integer",
            "description": "Specifies the number of occurrences of the same event on the same device.",
            "format": "int32",
            "example": 1
          },
          "lastSeenTime": {
            "type": "string",
            "description": "The last time this event is generated",
            "example": "15 June 2023 07:57:17"
          },
          "alertNum": {
            "type": "integer",
            "description": "Count of event alerts",
            "format": "int32",
            "example": 1
          },
          "action": {
            "type": "string",
            "description": "The action of event (Block / Log / SimulationBlock / Ignore / Accept)",
            "example": "Block"
          },
          "severity": {
            "type": "string",
            "description": "The severity of event (Critical / High / Medium / Low / Debug / Internal / Unknown)",
            "example": "Medium"
          },
          "application": {
            "type": "string",
            "description": "The application path of the event",
            "example": "\\Device\\HarddiskVolume1\\temp\\test.txt"
          },
          "os": {
            "type": "string",
            "description": "The operating system of the agent",
            "example": "Windows"
          },
          "agentId": {
            "type": "integer",
            "description": "Specifies the agent ID",
            "format": "int64",
            "example": 178729
          },
          "eventId": {
            "type": "integer",
            "description": "Specifies the event ID",
            "format": "int64",
            "example": 892640825
          },
          "eventType": {
            "type": "integer",
            "description": "Bitmask of event type FILE_EXECUTE_ATTEMPT        = (1 << 13); DEVICE_CONTROL_MANAGEMENT   = (1 << 21); FIM_FILE                    = (1 << 25);",
            "format": "int64",
            "example": 33554432
          },
          "eventClassification": {
            "type": "string",
            "description": "Classification of the event (ClassificationMalicious / ClassificationProbablyMalicious / ClassificationPup / ClassificationProbablyGood / ClassificationGood)",
            "example": "ClassificationInconclusive"
          },
          "isSigned": {
            "type": "boolean",
            "description": "Whether the process of the event is signed",
            "example": true
          },
          "stackInfos": {
            "type": "array",
            "description": "The stack informations",
            "items": {
              "$ref": "#/components/schemas/PostAgentEventStackInfos"
            }
          },
          "alerts": {
            "type": "array",
            "description": "The alert informations",
            "items": {
              "$ref": "#/components/schemas/PostAgentEventAlerts"
            }
          }
        }
      },
      "PostAgentEventStackInfos": {
        "title": "PostAgentEventStackInfos",
        "type": "object",
        "properties": {
          "commonAdditionalInfo": {
            "type": "array",
            "description": "The common additional informations",
            "items": {
              "$ref": "#/components/schemas/PostAgentEventCommonAdditionalInfo"
            }
          }
        }
      },
      "PostAgentEventCommonAdditionalInfo": {
        "title": "PostAgentEventCommonAdditionalInfo",
        "type": "object",
        "properties": {
          "type": {
            "type": "integer",
            "description": "These are the types of the addition info structures 0 NSLO_AI_STRING, 1 NSLO_AI_STACK_ENTRY_INFO, 2 NSLO_AI_DYNAMIC_CODE_RELATE_MODULE, 3 NSLO_AI_MODULE_INJECTING_PROCESS, 4 NSLO_AI_MODULE_VERSION_INFO, 5 NSLO_AI_COMMAND_LINE_ARGUMENTS, 6 NSLO_AI_INVALID_STACK_POINTER, 7 NSLO_AI_CODE_CHUNK, 8 NSLO_AI_KERNEL_INJECTION_INFO, 9 NSLO_AI_MODULE_HOOK_INFO, 10 NSLO_AI_THREAD_INJECTION_INFO, 11 NSLO_AI_ADDITIONAL_NAME_INFO, 12 NSLO_AI_JAVA_FILE_INFO,     13 NSLO_AI_LAUNCHD_INFO, 14 NSLO_AI_REGISTRY_VALUE_INFO, 15 NSLO_AI_CREATE_SERVICE_INFO, 16 NSLO_AI_LOGGED_USER_AND_OWNER_INFO, 17 NSLO_AI_FILE_INFO, 18 NSLO_AI_PE_FILE_SIGNING_INFO, 19 NSLO_AI_PE_CODE_GENERATOR_INFO, 20 NSLO_AI_VOLUME_MOUNT_POINT_INFO, 21 NSLO_AI_COMMAND_LINE_ORIGINAL, 22 NSLO_AI_DEVICE_CONTROL_INFO, 23 NSLO_AI_PE_DOT_NET_MODULE_INFO, 24 NSLO_AI_CONNECT_URL_INFO, 25 NSLO_AI_ADDITIONAL_REMOTE_THREAD_INFO, 26 NSLO_AI_AV_SCAN_INFO, 27 NSLO_AI_STACK_DIGEST_INFO, 28 NSLO_AI_FLOW_DIGEST_INFO, 29 NSLO_AI_APP_CONTROL_INFO, 30 NSLO_AI_ADDITIONAL_PARENT_INFO, 31 NSLO_AI_MODULE_HASH_INFO, 32 NSLO_MAX_TYPE",
            "format": "int",
            "example": 16
          },
          "processOwner": {
            "type": "string",
            "description": "The process owner",
            "example": "WIN10\\user01"
          },
          "loggedUsers": {
            "type": "array",
            "description": "The logged user informations",
            "items": {
              "$ref": "#/components/schemas/PostAgentEventCommonAdditionalInfoLoggedUsers"
            }
          }
        }
      },
      "PostAgentEventCommonAdditionalInfoLoggedUsers": {
        "title": "PostAgentEventCommonAdditionalInfoLoggedUsers",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The logged user name",
            "example": "WIN10\\user01"
          },
          "logonTime": {
            "type": "integer",
            "description": "The user log on time.",
            "format": "int64",
            "example": 1688125122
          }
        }
      },
      "PostAgentEventAlerts": {
        "title": "PostAgentEventAlerts",
        "type": "object",
        "properties": {
          "rule": {
            "type": "integer",
            "description": "The rule object id. It is the configuration rule object id.",
            "format": "int64",
            "example": 21474991404
          },
          "ruleContentId": {
            "type": "integer",
            "description": "The rule content id. It is the configuration rule object content id.",
            "format": "int64",
            "example": 1074
          },
          "stackType": {
            "type": "string",
            "description": "The stack type. For example, FIM FILE WRITE/ DEVICE CONTROL/PRE EXECUTE",
            "example": "FIM FILE WRITE"
          }
        }
      },
      "AgentStatusLoggedUserRequest": {
        "title": "AgentStatusLoggedUserRequest",
        "required": [
          "name",
          "logonTime",
          "isActive"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The logged user name",
            "example": "WIN10\\admin"
          },
          "logonTime": {
            "type": "integer",
            "description": "The logon time",
            "example": 1686841468,
            "format": "int64"
          },
          "isActive": {
            "type": "boolean",
            "description": "Is active or not",
            "example": true
          }
        }
      },
      "PostAgentStatusResponse": {
        "title": "PostAgentStatusResponse",
        "required": [
          "serverTime",
          "version"
        ],
        "type": "object",
        "properties": {
          "serverTime": {
            "type": "integer",
            "description": "The Server time",
            "example": 1686899938584,
            "format": "int64"
          },
          "version": {
            "type": "integer",
            "description": "The version",
            "example": 1000,
            "format": "int64"
          },
          "doRegister": {
            "type": "boolean",
            "description": "Only set to true and send when the device is unknown in management",
            "example": false
          },
          "command": {
            "type": "integer",
            "description": "The command from controller. 0 Null 1 Uninstall 2 Enable 3 Disable",
            "example": 0,
            "format": "int32"
          }
        }
      },
      "GetAgentUpgradeResponse": {
        "title": "GetAgentUpgradeResponse",
        "required": [
          "downloadLink"
        ],
        "type": "object",
        "properties": {
          "downloadLink": {
            "type": "string",
            "description": "The download link of the agent installer"
          }
        }
      },
      "GetAgentsResponse": {
        "title": "GetAgentsResponse",
        "required": [
          "agentName",
          "agentId",
          "agentGroupName",
          "agentGroupId",
          "ipAddress",
          "operatingSystem",
          "macAddresses",
          "disabled",
          "isolation",
          "state",
          "version",
          "lastSeenTime"
        ],
        "type": "object",
        "properties": {
          "agentName": {
            "type": "string",
            "description": "Agent name"
          },
          "agentId": {
            "type": "integer",
            "description": "Agent id",
            "format": "int64"
          },
          "agentGroupName": {
            "type": "string",
            "description": "Agent group name"
          },
          "agentGroupId": {
            "type": "integer",
            "description": "Agent Group id",
            "format": "int64"
          },
          "ipAddress": {
            "type": "string",
            "description": "IP address"
          },
          "operatingSystem": {
            "type": "string",
            "description": "Operation system"
          },
          "macAddresses": {
            "type": "string",
            "description": "MAC addresses"
          },
          "disabled": {
            "type": "boolean",
            "description": "Specifies that the agent was enabled/disabled in the controller"
          },
          "isolation": {
            "type": "boolean",
            "description": "Isolate or remove isolation"
          },
          "state": {
            "type": "string",
            "description": "Agent state"
          },
          "version": {
            "type": "string",
            "description": "Agent version"
          },
          "lastSeenTime": {
            "type": "string",
            "description": "Last time agent was enabled"
          },
          "loggedUsers": {
            "type": "array",
            "description": "The logged users",
            "items": {
              "$ref": "#/components/schemas/AgentsLoggedUserRequest"
            }
          },
          "osFamily": {
            "type": "string",
            "description": "OS families such as Windows, macOS, Windows Server"
          }
        }
      },
      "AgentsLoggedUserRequest": {
        "title": "AgentsLoggedUserRequest",
        "required": [
          "name",
          "logonTime"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The logged user name",
            "example": "WIN10\\admin"
          },
          "logonTime": {
            "type": "integer",
            "description": "The user logon time",
            "example": 1686841468,
            "format": "int64"
          }
        }
      },
      "GetEndpointUserResponse": {
        "title": "GetEndpointUserResponse",
        "required": [
          "userName",
          "userId",
          "userGroupName",
          "userGroupId"
        ],
        "type": "object",
        "properties": {
          "userName": {
            "type": "string",
            "description": "Endpoint user name"
          },
          "userId": {
            "type": "integer",
            "description": "Endpoint user id",
            "format": "int64"
          },
          "userGroupName": {
            "type": "string",
            "description": "Endpoint user group name"
          },
          "userGroupId": {
            "type": "integer",
            "description": "Endpoint user Group id",
            "format": "int64"
          }
        }
      },
      "UpdateEndpointUserRequest": {
        "title": "UpdateEndpointRequest",
        "required": [
          "userName",
          "userGroupId"
        ],
        "type": "object",
        "properties": {
          "userName": {
            "type": "string",
            "description": "Endpoint user name"
          },
          "userGroupId": {
            "type": "integer",
            "description": "Endpoint user Group id",
            "format": "int64"
          }
        }
      },
      "GetAgentGroupsResponse": {
        "title": "GetAgentGroupsResponse",
        "required": [
          "id",
          "name",
          "policies"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Agent group id",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "Agent group name"
          },
          "agents": {
            "type": "array",
            "description": "Agents",
            "items": {
              "$ref": "#/components/schemas/AgentsResponse"
            }
          },
          "policies": {
            "type": "array",
            "description": "list of policies associated with the agent group",
            "items": {
              "$ref": "#/components/schemas/GetAgentGroupsPoliciesResponse"
            }
          }
        }
      },
      "AgentsResponse": {
        "title": "AgentsResponse",
        "type": "object",
        "properties": {
          "agentId": {
            "type": "integer",
            "description": "Agent id",
            "format": "int64"
          },
          "agentName": {
            "type": "string",
            "description": "Agent name"
          }
        }
      },
      "PostAgentGroupsRequest": {
        "title": "PostAgentGroupsRequest",
        "required": [
          "name",
          "policies"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Agent group name"
          },
          "agentIds": {
            "type": "array",
            "description": "Agent Ids",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "organization": {
            "type": "string",
            "description": "Organization name"
          },
          "policies": {
            "type": "array",
            "description": "list of policies associated with the agent group",
            "items": {
              "$ref": "#/components/schemas/PostAgentGroupsPoliciesRequest"
            }
          }
        }
      },
      "PostAgentGroupsResponse": {
        "title": "PostAgentGroupsResponse",
        "required": [
          "agentGroupId"
        ],
        "type": "object",
        "properties": {
          "agentGroupId": {
            "type": "integer",
            "description": "Specifies the agent group ID",
            "format": "int64"
          }
        }
      },
      "PostAgentGroupsPoliciesRequest": {
        "title": "PostAgentGroupsPoliciesRequest",
        "required": [
          "policyType",
          "policyId"
        ],
        "type": "object",
        "properties": {
          "policyType": {
            "type": "integer",
            "description": "Rule index\nExecution Prevention Rules\n1 Application Control\n2 File Integrity Control\n3 Execution Prevention\n4 Exfiltration Prevention\n5 Ransomware Prevention\n6 Device Control",
            "format": "int32"
          },
          "policyId": {
            "type": "integer",
            "description": "Specifies the policy ID",
            "format": "int64"
          }
        }
      },
      "PutAgentGroupsPoliciesRequest": {
        "title": "PutAgentGroupsPoliciesRequest",
        "required": [
          "policyType",
          "policyId"
        ],
        "type": "object",
        "properties": {
          "policyType": {
            "type": "integer",
            "description": "Rule index\nExecution Prevention Rules\n1 Application Control\n2 File Integrity Control\n3 Execution Prevention\n4 Exfiltration Prevention\n5 Ransomware Prevention\n6 Device Control",
            "format": "int32"
          },
          "policyId": {
            "type": "integer",
            "description": "Specifies the policy ID",
            "format": "int64"
          }
        }
      },
      "GetAgentGroupsPoliciesResponse": {
        "title": "GetAgentGroupsPoliciesResponse",
        "required": [
          "policyType",
          "policyId",
          "policyName"
        ],
        "type": "object",
        "properties": {
          "policyType": {
            "type": "integer",
            "description": "Rule index\nExecution Prevention Rules\n1 Application Control\n2 File Integrity Control\n3 Execution Prevention\n4 Exfiltration Prevention\n5 Ransomware Prevention\n6 Device Control",
            "format": "int32"
          },
          "policyId": {
            "type": "integer",
            "description": "Specifies the policy ID",
            "format": "int64"
          },
          "policyName": {
            "type": "string",
            "description": "The Policy Name"
          }
        }
      },
      "AgentGroupsResponse": {
        "title": "AgentGroupsResponse",
        "type": "object",
        "properties": {
          "osFamily": {
            "type": "string",
            "description": "OS"
          },
          "version": {
            "type": "string",
            "description": "version"
          }
        }
      },
      "PatchAgentsRequest": {
        "title": "PatchAgentGroupsRequest",
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "description": "Perform an action on the agent.",
            "enum": [
              "Isolation",
              "Uninstall",
              "Enabled",
              "Disabled",
              "Remove-isolation"
            ]
          }
        }
      },
      "GetAgentGroupInstallersResponse": {
        "title": "GetAgentGroupInstallersResponse",
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Agent group id",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "Agent group name"
          },
          "targetVersions": {
            "type": "array",
            "description": "Agent group target versions",
            "items": {
              "$ref": "#/components/schemas/AgentGroupsResponse"
            }
          }
        }
      },
      "GetExecutionPreventionPoliciesResponse": {
        "title": "GetExecutionPreventionPoliciesResponse",
        "required": [
          "policyId",
          "policyName",
          "agentGroups",
          "source",
          "operationMode",
          "state",
          "rules"
        ],
        "type": "object",
        "properties": {
          "policyId": {
            "type": "integer",
            "description": "Specifies the policy ID",
            "format": "int64"
          },
          "policyName": {
            "type": "string",
            "description": "The policy name"
          },
          "agentGroups": {
            "type": "array",
            "description": "The list of agent groups",
            "items": {
              "$ref": "#/components/schemas/GetPolicyAgentGroupObject"
            }
          },
          "source": {
            "type": "string",
            "description": "Fortinet default policy or user defined policy",
            "enum": [
              "Fortinet",
              "User Defined"
            ]
          },
          "operationMode": {
            "type": "string",
            "description": "The policy mode",
            "enum": [
              "Simulation",
              "Prevention"
            ]
          },
          "state": {
            "type": "boolean",
            "description": "Enabled/Disabled.",
            "example": true
          },
          "rules": {
            "type": "array",
            "description": "list of rules included in the policy",
            "items": {
              "$ref": "#/components/schemas/SecurityExecutionPreventionRuleResponse"
            }
          }
        }
      },
      "PostExecutionPreventionPolicyRequest": {
        "title": "PostExecutionPreventionPolicyRequest",
        "required": [
          "policyName",
          "source",
          "operationMode",
          "state",
          "rules"
        ],
        "type": "object",
        "properties": {
          "policyName": {
            "type": "string",
            "description": "The policy name"
          },
          "source": {
            "type": "string",
            "description": "Fortinet default policy or user defined policy",
            "enum": [
              "Fortinet",
              "User Defined"
            ]
          },
          "operationMode": {
            "type": "string",
            "description": "The policy mode",
            "enum": [
              "Simulation",
              "Prevention"
            ]
          },
          "state": {
            "type": "boolean",
            "description": "Enabled/Disabled.",
            "example": true
          },
          "rules": {
            "type": "array",
            "description": "list of rules included in the policy",
            "items": {
              "$ref": "#/components/schemas/SecurityExecutionPreventionRuleResponse"
            }
          }
        }
      },
      "PostExecutionPreventionPolicyResponse": {
        "title": "PostExecutionPreventionPolicyResponse",
        "required": [
          "policyId"
        ],
        "type": "object",
        "properties": {
          "policyId": {
            "type": "integer",
            "description": "Specifies the policy ID",
            "format": "int64"
          }
        }
      },
      "PutExecutionPreventionPoliciesRequest": {
        "title": "PutExecutionPreventionPoliciesRequest",
        "required": [
          "policyName",
          "source",
          "operationMode",
          "state",
          "rules"
        ],
        "type": "object",
        "properties": {
          "policyName": {
            "type": "string",
            "description": "The policy name"
          },
          "source": {
            "type": "string",
            "description": "Fortinet default policy or user defined policy",
            "enum": [
              "Fortinet",
              "User Defined"
            ]
          },
          "operationMode": {
            "type": "string",
            "description": "The policy mode",
            "enum": [
              "Simulation",
              "Prevention"
            ]
          },
          "state": {
            "type": "boolean",
            "description": "Enabled/Disabled.",
            "example": true
          },
          "rules": {
            "type": "array",
            "description": "list of rules included in the policy",
            "items": {
              "$ref": "#/components/schemas/SecurityExecutionPreventionRuleRequest"
            }
          }
        }
      },
      "SecurityExecutionPreventionRuleRequest": {
        "title": "SecurityRuleRequest",
        "required": [
          "ruleIndex",
          "securityAction",
          "state"
        ],
        "type": "object",
        "properties": {
          "ruleIndex": {
            "type": "integer",
            "description": "Rule index\nExecution Prevention Rules\n1 Malicious File Detected\n2 Privilege Escalation Exploit Detected - A malicious escalation of privileges was detected\n3 Sandbox Analysis - File was sent to the sandbox for analysis\n4 Stack Pivot - Stack Pointer is Out of Bounds\n5 Suspicious Driver Load - Attempt to load a suspicious driver\n6 Suspicious File Detected\n7 Suspicious Script Execution - A script was executed in a suspicious context\n8 Unconfirmed File Detected",
            "format": "int32"
          },
          "securityAction": {
            "type": "string",
            "description": "The rule security action to apply",
            "enum": [
              "Log",
              "Block"
            ]
          },
          "state": {
            "type": "boolean",
            "description": "Is the rule enabled or disabled. Ture is Enabled.",
            "example": true
          }
        }
      },
      "SecurityExecutionPreventionRuleResponse": {
        "title": "SecurityRuleResponse",
        "required": [
          "ruleIndex",
          "securityAction",
          "state"
        ],
        "type": "object",
        "properties": {
          "ruleIndex": {
            "type": "integer",
            "description": "Rule index\nExecution Prevention Rules\n1 Malicious File Detected\n2 Privilege Escalation Exploit Detected - A malicious escalation of privileges was detected\n3 Sandbox Analysis - File was sent to the sandbox for analysis\n4 Stack Pivot - Stack Pointer is Out of Bounds\n5 Suspicious Driver Load - Attempt to load a suspicious driver\n6 Suspicious File Detected\n7 Suspicious Script Execution - A script was executed in a suspicious context\n8 Unconfirmed File Detected",
            "format": "int32"
          },
          "securityAction": {
            "type": "string",
            "description": "The rule security action to apply",
            "enum": [
              "Log",
              "Block"
            ]
          },
          "state": {
            "type": "boolean",
            "description": "Is the rule enabled or disabled. Ture is Enabled.",
            "example": true
          }
        }
      },
      "GetExfiltrationPreventionPoliciesResponse": {
        "title": "GetExfiltrationPreventionPoliciesResponse",
        "required": [
          "policyId",
          "policyName",
          "agentGroups",
          "source",
          "operationMode",
          "state",
          "rules"
        ],
        "type": "object",
        "properties": {
          "policyId": {
            "type": "integer",
            "description": "Specifies the policy ID",
            "format": "int64"
          },
          "policyName": {
            "type": "string",
            "description": "The policy name"
          },
          "agentGroups": {
            "type": "array",
            "description": "The list of agent groups",
            "items": {
              "$ref": "#/components/schemas/GetPolicyAgentGroupObject"
            }
          },
          "source": {
            "type": "string",
            "description": "Fortinet default policy or user defined policy",
            "enum": [
              "Fortinet",
              "User Defined"
            ]
          },
          "operationMode": {
            "type": "string",
            "description": "The policy mode",
            "enum": [
              "Simulation",
              "Prevention"
            ]
          },
          "state": {
            "type": "boolean",
            "description": "Enabled/Disabled.",
            "example": true
          },
          "rules": {
            "type": "array",
            "description": "list of rules included in the policy",
            "items": {
              "$ref": "#/components/schemas/SecurityExfiltrationPreventionRuleResponse"
            }
          }
        }
      },
      "PostExfiltrationPreventionPolicyRequest": {
        "title": "PostExfiltrationPreventionPolicyRequest",
        "required": [
          "policyName",
          "source",
          "operationMode",
          "state",
          "rules"
        ],
        "type": "object",
        "properties": {
          "policyName": {
            "type": "string",
            "description": "The policy name"
          },
          "source": {
            "type": "string",
            "description": "Fortinet default policy or user defined policy",
            "enum": [
              "Fortinet",
              "User Defined"
            ]
          },
          "operationMode": {
            "type": "string",
            "description": "The policy mode",
            "enum": [
              "Simulation",
              "Prevention"
            ]
          },
          "state": {
            "type": "boolean",
            "description": "Enabled/Disabled.",
            "example": true
          },
          "rules": {
            "type": "array",
            "description": "list of rules included in the policy",
            "items": {
              "$ref": "#/components/schemas/SecurityExfiltrationPreventionRuleResponse"
            }
          }
        }
      },
      "PostExfiltrationPreventionPolicyResponse": {
        "title": "PostExfiltrationPreventionPolicyResponse",
        "required": [
          "policyId"
        ],
        "type": "object",
        "properties": {
          "policyId": {
            "type": "integer",
            "description": "Specifies the policy ID",
            "format": "int64"
          }
        }
      },
      "PutExfiltrationPreventionPoliciesRequest": {
        "title": "PutExfiltrationPreventionPoliciesRequest",
        "required": [
          "policyName",
          "source",
          "operationMode",
          "state",
          "rules"
        ],
        "type": "object",
        "properties": {
          "policyName": {
            "type": "string",
            "description": "The policy name"
          },
          "source": {
            "type": "string",
            "description": "Fortinet default policy or user defined policy",
            "enum": [
              "Fortinet",
              "User Defined"
            ]
          },
          "operationMode": {
            "type": "string",
            "description": "The policy mode",
            "enum": [
              "Simulation",
              "Prevention"
            ]
          },
          "state": {
            "type": "boolean",
            "description": "Enabled/Disabled.",
            "example": true
          },
          "rules": {
            "type": "array",
            "description": "list of rules included in the policy",
            "items": {
              "$ref": "#/components/schemas/SecurityExfiltrationPreventionRuleRequest"
            }
          }
        }
      },
      "SecurityExfiltrationPreventionRuleRequest": {
        "title": "SecurityExfiltrationPreventionRuleRequest",
        "required": [
          "ruleIndex",
          "securityAction",
          "state"
        ],
        "type": "object",
        "properties": {
          "ruleIndex": {
            "type": "integer",
            "description": "Rule index\nExfiltration Prevention Rules\n1 Access to Critical System Information\n2 Bruteforce Attempt Detected\n3 Debugged Process - Connection from a Debugged Process\n4 Dynamic Code - Malicious Runtime Generated Code Detected\n5 Executable Format - Bad Executable File Format\n6 Executable Stack - A Stack with Executable Code\n7 Executed Program has no installer\n8 Fake Critical Program - Program Attempted to Hide as a Service\n9 Fake Packer - A Fake Known Packer Detected\n10 Hidden Process - Connection Attempt from a Hidden Process\n11 Injected Executable - Connection Attempt from an Injected Executable\n12 Injected Process - Process Created from an Injected Thread\n13 Injected Thread - Connection from an Injected Thread\n14 Invalid Checksum - Connection Attempt from Application with Invalid Checksum\n15 Invalid Execution - Code Executed from an Invalid Memory Location\n16 Invalid Pointer - Invalid Stack Pointer Value\n17 Kernel Injection - Code Injected from Kernel to User Mode\n18 Keylogging Activity Detected\n19 Known Packer - Activity by an Application packed by a Known Packer was detected\n20 Malicious File Detected\n21 Malicious Process - A Process is Interfering with Agent's Operation\n22 Malicious Website Detected - Attempt to access a malicious website, domain or IP address\n23 Modified Executable - Connection from an In-Memory Modified Executable\n24 Network Scanning Attempt Detectet\n25 Non-standard Communication - Use of non-standard communication method detected\n26 PUP - Potentially Unwanted Program\n27 Partially Mapped - Partially Mapped Executable File on Stack\n28 Privilege Escalation Exploit Detected - A malicious escalation of privileges was detected\n29 Process Hollowing - Process Code Was Replaced\n30 Process Injection - Entry Point Modification Detected\n31 Protected System Configuration - Modification Attempt of Protected Configuration\n32 Stack Pivot - Stack Pointer is Out of Bounds\n33 Stack Tampering - Stack Collection Interrupted\n34 Suspicious Application - Connection Attempt from a Suspicious Application\n35 Suspicious Macro - A macro has performed suspicious actions\n36 Suspicious Packer - Activity by an Application packed by a Suspicious Packer was detected",
            "format": "int32"
          },
          "securityAction": {
            "type": "string",
            "description": "The rule security action to apply",
            "enum": [
              "Log",
              "Block"
            ]
          },
          "state": {
            "type": "boolean",
            "description": "Is the rule enabled or disabled. Ture is Enabled.",
            "example": true
          }
        }
      },
      "SecurityExfiltrationPreventionRuleResponse": {
        "title": "SecurityExfiltrationPreventionRuleResponse",
        "required": [
          "ruleIndex",
          "securityAction",
          "state"
        ],
        "type": "object",
        "properties": {
          "ruleIndex": {
            "type": "integer",
            "description": "Rule index\nExfiltration Prevention Rules\n1 Access to Critical System Information\n2 Bruteforce Attempt Detected\n3 Debugged Process - Connection from a Debugged Process\n4 Dynamic Code - Malicious Runtime Generated Code Detected\n5 Executable Format - Bad Executable File Format\n6 Executable Stack - A Stack with Executable Code\n7 Executed Program has no installer\n8 Fake Critical Program - Program Attempted to Hide as a Service\n9 Fake Packer - A Fake Known Packer Detected\n10 Hidden Process - Connection Attempt from a Hidden Process\n11 Injected Executable - Connection Attempt from an Injected Executable\n12 Injected Process - Process Created from an Injected Thread\n13 Injected Thread - Connection from an Injected Thread\n14 Invalid Checksum - Connection Attempt from Application with Invalid Checksum\n15 Invalid Execution - Code Executed from an Invalid Memory Location\n16 Invalid Pointer - Invalid Stack Pointer Value\n17 Kernel Injection - Code Injected from Kernel to User Mode\n18 Keylogging Activity Detected\n19 Known Packer - Activity by an Application packed by a Known Packer was detected\n20 Malicious File Detected\n21 Malicious Process - A Process is Interfering with Agent's Operation\n22 Malicious Website Detected - Attempt to access a malicious website, domain or IP address\n23 Modified Executable - Connection from an In-Memory Modified Executable\n24 Network Scanning Attempt Detectet\n25 Non-standard Communication - Use of non-standard communication method detected\n26 PUP - Potentially Unwanted Program\n27 Partially Mapped - Partially Mapped Executable File on Stack\n28 Privilege Escalation Exploit Detected - A malicious escalation of privileges was detected\n29 Process Hollowing - Process Code Was Replaced\n30 Process Injection - Entry Point Modification Detected\n31 Protected System Configuration - Modification Attempt of Protected Configuration\n32 Stack Pivot - Stack Pointer is Out of Bounds\n33 Stack Tampering - Stack Collection Interrupted\n34 Suspicious Application - Connection Attempt from a Suspicious Application\n35 Suspicious Macro - A macro has performed suspicious actions\n36 Suspicious Packer - Activity by an Application packed by a Suspicious Packer was detected",
            "format": "int32"
          },
          "securityAction": {
            "type": "string",
            "description": "The rule security action to apply",
            "enum": [
              "Log",
              "Block"
            ]
          },
          "state": {
            "type": "boolean",
            "description": "Is the rule enabled or disabled. Ture is Enabled.",
            "example": true
          }
        }
      },
      "GetRansomwarePreventionPoliciesResponse": {
        "title": "GetRansomwarePreventionPoliciesResponse",
        "required": [
          "policyId",
          "policyName",
          "agentGroups",
          "source",
          "operationMode",
          "state",
          "rules"
        ],
        "type": "object",
        "properties": {
          "policyId": {
            "type": "integer",
            "description": "Specifies the policy ID",
            "format": "int64"
          },
          "policyName": {
            "type": "string",
            "description": "The policy name"
          },
          "agentGroups": {
            "type": "array",
            "description": "The list of agent groups",
            "items": {
              "$ref": "#/components/schemas/GetPolicyAgentGroupObject"
            }
          },
          "source": {
            "type": "string",
            "description": "Fortinet default policy or user defined policy",
            "enum": [
              "Fortinet",
              "User Defined"
            ]
          },
          "operationMode": {
            "type": "string",
            "description": "The policy mode",
            "enum": [
              "Simulation",
              "Prevention"
            ]
          },
          "state": {
            "type": "boolean",
            "description": "Enabled/Disabled.",
            "example": true
          },
          "rules": {
            "type": "array",
            "description": "list of rules included in the policy",
            "items": {
              "$ref": "#/components/schemas/SecurityRansomwarePreventionRuleResponse"
            }
          }
        }
      },
      "PostRansomwarePreventionPolicyRequest": {
        "title": "PostRansomwarePreventionPolicyRequest",
        "required": [
          "policyName",
          "source",
          "operationMode",
          "state",
          "rules"
        ],
        "type": "object",
        "properties": {
          "policyName": {
            "type": "string",
            "description": "The policy name"
          },
          "source": {
            "type": "string",
            "description": "Fortinet default policy or user defined policy",
            "enum": [
              "Fortinet",
              "User Defined"
            ]
          },
          "operationMode": {
            "type": "string",
            "description": "The policy mode",
            "enum": [
              "Simulation",
              "Prevention"
            ]
          },
          "state": {
            "type": "boolean",
            "description": "Enabled/Disabled.",
            "example": true
          },
          "rules": {
            "type": "array",
            "description": "list of rules included in the policy",
            "items": {
              "$ref": "#/components/schemas/SecurityRansomwarePreventionRuleResponse"
            }
          }
        }
      },
      "PostRansomwarePreventionPolicyResponse": {
        "title": "PostRansomwarePreventionPolicyResponse",
        "required": [
          "policyId"
        ],
        "type": "object",
        "properties": {
          "policyId": {
            "type": "integer",
            "description": "Specifies the policy ID",
            "format": "int64"
          }
        }
      },
      "PutRansomwarePreventionPoliciesRequest": {
        "title": "PutRansomwarePreventionPoliciesRequest",
        "required": [
          "policyName",
          "source",
          "operationMode",
          "state",
          "rules"
        ],
        "type": "object",
        "properties": {
          "policyName": {
            "type": "string",
            "description": "The policy name"
          },
          "source": {
            "type": "string",
            "description": "Fortinet default policy or user defined policy",
            "enum": [
              "Fortinet",
              "User Defined"
            ]
          },
          "operationMode": {
            "type": "string",
            "description": "The policy mode",
            "enum": [
              "Simulation",
              "Prevention"
            ]
          },
          "state": {
            "type": "boolean",
            "description": "Enabled/Disabled.",
            "example": true
          },
          "rules": {
            "type": "array",
            "description": "list of rules included in the policy",
            "items": {
              "$ref": "#/components/schemas/SecurityRansomwarePreventionRuleRequest"
            }
          }
        }
      },
      "SecurityRansomwarePreventionRuleRequest": {
        "title": "SecurityRansomwarePreventionRuleRequest",
        "required": [
          "ruleIndex",
          "securityAction",
          "state"
        ],
        "type": "object",
        "properties": {
          "ruleIndex": {
            "type": "integer",
            "description": "Rule index\nRansomware Prevention Rules\n1 Debugged Process - Connection from a Debugged Process\n2 Disk encryption attempt detected - Suspicious full disk encryption was detected\n3 Dynamic Code - Malicious Runtime Generated Code Detected\n4 Executable Format - Bad Executable File Format\n5 Executable Stack - A Stack with Executable Code\n6 Executed Program has no installer\n7 Fake Critical Program - Program Attempted to Hide as a Service\n8 Fake Packer - A Fake Known Packer Detected\n9 File Encryptor - Suspicious file modification\n10 Hidden Process - Connection Attempt from a Hidden Process\n11 Injected Executable - Connection Attempt from an Injected Executable\n12 Injected Process - Process Created from an Injected Thread\n13 Injected Thread - Connection from an Injected Thread\n14 Invalid Checksum - Connection Attempt from Application with Invalid Checksum\n15 Invalid Execution - Code Executed from an Invalid Memory Location\n16 Invalid Pointer - Invalid Stack Pointer Value\n17 Kernel Injection - Code Injected from Kernel to User Mode\n18 Known Packer - Activity by an Application packed by a Known Packer was detected\n19 Malicious File Detected\n20 Malicious Process - A Process is Interfering with Agent's Operation\n21 Modified Executable - Connection from an In-Memory Modified Executable\n22 PUP - Potentially Unwanted Program\n23 Partially Mapped - Partially Mapped Executable File on Stack\n24 Privilege Escalation Exploit Detected - A malicious escalation of privileges was detected\n25 Process Hollowing - Process Code Was Replaced\n26 Process Injection - Entry Point Modification Detected\n27 Stack Pivot - Stack Pointer is Out of Bounds\n28 Stack Tampering - Stack Collection Interrupted\n29 Suspicious Application - Connection Attempt from a Suspicious Application\n30 Suspicious Packer - Activity by an Application packed by a Suspicious Packer was detected\n31 Tampered Executable - Critical Executable was Tampered With\n32 Unconfirmed Executable - Executable File Failed Verification Test\n33 Unmapped Executable - Executable File Without a Corresponding File System Reference\n34 Writeable Code - Identified an Executable with Writable Code",
            "format": "int32"
          },
          "securityAction": {
            "type": "string",
            "description": "The rule security action to apply",
            "enum": [
              "Log",
              "Block"
            ]
          },
          "state": {
            "type": "boolean",
            "description": "Is the rule enabled or disabled. Ture is Enabled.",
            "example": true
          }
        }
      },
      "SecurityRansomwarePreventionRuleResponse": {
        "title": "SecurityRansomwarePreventionRuleResponse",
        "required": [
          "ruleIndex",
          "securityAction",
          "state"
        ],
        "type": "object",
        "properties": {
          "ruleIndex": {
            "type": "integer",
            "description": "Rule index\nRansomware Prevention Rules\n1 Debugged Process - Connection from a Debugged Process\n2 Disk encryption attempt detected - Suspicious full disk encryption was detected\n3 Dynamic Code - Malicious Runtime Generated Code Detected\n4 Executable Format - Bad Executable File Format\n5 Executable Stack - A Stack with Executable Code\n6 Executed Program has no installer\n7 Fake Critical Program - Program Attempted to Hide as a Service\n8 Fake Packer - A Fake Known Packer Detected\n9 File Encryptor - Suspicious file modification\n10 Hidden Process - Connection Attempt from a Hidden Process\n11 Injected Executable - Connection Attempt from an Injected Executable\n12 Injected Process - Process Created from an Injected Thread\n13 Injected Thread - Connection from an Injected Thread\n14 Invalid Checksum - Connection Attempt from Application with Invalid Checksum\n15 Invalid Execution - Code Executed from an Invalid Memory Location\n16 Invalid Pointer - Invalid Stack Pointer Value\n17 Kernel Injection - Code Injected from Kernel to User Mode\n18 Known Packer - Activity by an Application packed by a Known Packer was detected\n19 Malicious File Detected\n20 Malicious Process - A Process is Interfering with Agent's Operation\n21 Modified Executable - Connection from an In-Memory Modified Executable\n22 PUP - Potentially Unwanted Program\n23 Partially Mapped - Partially Mapped Executable File on Stack\n24 Privilege Escalation Exploit Detected - A malicious escalation of privileges was detected\n25 Process Hollowing - Process Code Was Replaced\n26 Process Injection - Entry Point Modification Detected\n27 Stack Pivot - Stack Pointer is Out of Bounds\n28 Stack Tampering - Stack Collection Interrupted\n29 Suspicious Application - Connection Attempt from a Suspicious Application\n30 Suspicious Packer - Activity by an Application packed by a Suspicious Packer was detected\n31 Tampered Executable - Critical Executable was Tampered With\n32 Unconfirmed Executable - Executable File Failed Verification Test\n33 Unmapped Executable - Executable File Without a Corresponding File System Reference\n34 Writeable Code - Identified an Executable with Writable Code",
            "format": "int32"
          },
          "securityAction": {
            "type": "string",
            "description": "The rule security action to apply",
            "enum": [
              "Log",
              "Block"
            ]
          },
          "state": {
            "type": "boolean",
            "description": "Is the rule enabled or disabled. Ture is Enabled.",
            "example": true
          }
        }
      },
      "GetDeviceControlPoliciesResponse": {
        "title": "GetDeviceControlPoliciesResponse",
        "required": [
          "policyId",
          "policyName",
          "agentGroups",
          "source",
          "operationMode",
          "state",
          "rules"
        ],
        "type": "object",
        "properties": {
          "policyId": {
            "type": "integer",
            "description": "Specifies the policy ID",
            "format": "int64"
          },
          "policyName": {
            "type": "string",
            "description": "The policy name"
          },
          "agentGroups": {
            "type": "array",
            "description": "The list of agent groups",
            "items": {
              "$ref": "#/components/schemas/GetPolicyAgentGroupObject"
            }
          },
          "source": {
            "type": "string",
            "description": "Fortinet default policy or user defined policy",
            "enum": [
              "Fortinet",
              "User Defined"
            ]
          },
          "operationMode": {
            "type": "string",
            "description": "The policy mode",
            "enum": [
              "Simulation",
              "Prevention"
            ]
          },
          "state": {
            "type": "boolean",
            "description": "Enabled/Disabled.",
            "example": true
          },
          "rules": {
            "type": "array",
            "description": "list of rules included in the policy",
            "items": {
              "$ref": "#/components/schemas/SecurityDeviceControlRuleResponse"
            }
          }
        }
      },
      "PostDeviceControlPolicyRequest": {
        "title": "PostDeviceControlPolicyRequest",
        "required": [
          "policyName",
          "source",
          "operationMode",
          "state",
          "rules"
        ],
        "type": "object",
        "properties": {
          "policyName": {
            "type": "string",
            "description": "The policy name"
          },
          "source": {
            "type": "string",
            "description": "Fortinet default policy or user defined policy",
            "enum": [
              "Fortinet",
              "User Defined"
            ]
          },
          "operationMode": {
            "type": "string",
            "description": "The policy mode",
            "enum": [
              "Simulation",
              "Prevention"
            ]
          },
          "state": {
            "type": "boolean",
            "description": "Enabled/Disabled.",
            "example": true
          },
          "rules": {
            "type": "array",
            "description": "list of rules included in the policy",
            "items": {
              "$ref": "#/components/schemas/SecurityDeviceControlRuleResponse"
            }
          }
        }
      },
      "PostDeviceControlPolicyResponse": {
        "title": "PostDeviceControlPolicyResponse",
        "required": [
          "policyId"
        ],
        "type": "object",
        "properties": {
          "policyId": {
            "type": "integer",
            "description": "Specifies the policy ID",
            "format": "int64"
          }
        }
      },
      "PutDeviceControlPoliciesRequest": {
        "title": "PutDeviceControlPoliciesRequest",
        "required": [
          "policyName",
          "source",
          "operationMode",
          "state",
          "rules"
        ],
        "type": "object",
        "properties": {
          "policyName": {
            "type": "string",
            "description": "The policy name"
          },
          "source": {
            "type": "string",
            "description": "Fortinet default policy or user defined policy",
            "enum": [
              "Fortinet",
              "User Defined"
            ]
          },
          "operationMode": {
            "type": "string",
            "description": "The policy mode",
            "enum": [
              "Simulation",
              "Prevention"
            ]
          },
          "state": {
            "type": "boolean",
            "description": "Enabled/Disabled.",
            "example": true
          },
          "rules": {
            "type": "array",
            "description": "list of rules included in the policy",
            "items": {
              "$ref": "#/components/schemas/SecurityDeviceControlRuleRequest"
            }
          }
        }
      },
      "SecurityDeviceControlRuleRequest": {
        "title": "SecurityRuleRequest",
        "required": [
          "ruleIndex",
          "securityAction",
          "state"
        ],
        "type": "object",
        "properties": {
          "ruleIndex": {
            "type": "integer",
            "description": "Rule index\nDevice Control Rules\n1 USB Application Specific Device Detected\n2 USB Audio Device Detected\n3 USB Audio/Video Device Detected\n4 USB Base Class Device Detected\n5 USB Billboard Device Detected\n6 USB CDC-Data Device Detected\n7 USB Communications and CDC Control Device Detected\n8 USB Content Security Device Detected\n9 USB Diagnostic Device Detected\n10 USB Hub Detected\n11 USB Human Interface Control Device Detected\n12 USB Mass Storage Device Detected\n13 USB Miscellaneous Device Detected\n14 USB Personal Healthcare Device Detected\n15 USB Physical Device Detected\n16 USB Printer Detected\n17 USB Smart Card Detected\n18 USB Still Imaging Device Detected\n19 USB Type-C Bridge Device Detected\n20 USB Unknown Device Detected\n21 USB Vendor Specific Device Detected\n22 USB Video Detected\n23 USB Wireless Controller Device Detected",
            "format": "int32"
          },
          "securityAction": {
            "type": "string",
            "description": "The rule security action to apply",
            "enum": [
              "Log",
              "Block"
            ]
          },
          "state": {
            "type": "boolean",
            "description": "Is the rule enabled or disabled. Ture is Enabled.",
            "example": true
          }
        }
      },
      "SecurityDeviceControlRuleResponse": {
        "title": "SecurityRuleResponse",
        "required": [
          "ruleIndex",
          "securityAction",
          "state"
        ],
        "type": "object",
        "properties": {
          "ruleIndex": {
            "type": "integer",
            "description": "Rule index\nDevice Control Rules\n1 USB Application Specific Device Detected\n2 USB Audio Device Detected\n3 USB Audio/Video Device Detected\n4 USB Base Class Device Detected\n5 USB Billboard Device Detected\n6 USB CDC-Data Device Detected\n7 USB Communications and CDC Control Device Detected\n8 USB Content Security Device Detected\n9 USB Diagnostic Device Detected\n10 USB Hub Detected\n11 USB Human Interface Control Device Detected\n12 USB Mass Storage Device Detected\n13 USB Miscellaneous Device Detected\n14 USB Personal Healthcare Device Detected\n15 USB Physical Device Detected\n16 USB Printer Detected\n17 USB Smart Card Detected\n18 USB Still Imaging Device Detected\n19 USB Type-C Bridge Device Detected\n20 USB Unknown Device Detected\n21 USB Vendor Specific Device Detected\n22 USB Video Detected\n23 USB Wireless Controller Device Detected",
            "format": "int32"
          },
          "securityAction": {
            "type": "string",
            "description": "The rule security action to apply",
            "enum": [
              "Log",
              "Block"
            ]
          },
          "state": {
            "type": "boolean",
            "description": "Is the rule enabled or disabled. Ture is Enabled.",
            "example": true
          }
        }
      },
      "GetApplicationWhitelistingPoliciesResponse": {
        "title": "GetApplicationWhitelistingPoliciesResponse",
        "required": [
          "policyId",
          "policyName",
          "agentGroups",
          "source",
          "operationMode",
          "securityAction",
          "state"
        ],
        "type": "object",
        "properties": {
          "policyId": {
            "type": "integer",
            "description": "Specifies the policy ID",
            "format": "int64"
          },
          "policyName": {
            "type": "string",
            "description": "The policy name"
          },
          "agentGroups": {
            "type": "array",
            "description": "The list of agent groups",
            "items": {
              "$ref": "#/components/schemas/GetPolicyAgentGroupObject"
            }
          },
          "source": {
            "type": "string",
            "description": "Fortinet default policy or user defined policy",
            "enum": [
              "Fortinet",
              "User Defined"
            ]
          },
          "operationMode": {
            "type": "string",
            "description": "The policy mode",
            "enum": [
              "Simulation",
              "Prevention"
            ]
          },
          "securityAction": {
            "type": "string",
            "description": "The rule security action to apply",
            "enum": [
              "Log",
              "Block"
            ]
          },
          "state": {
            "type": "boolean",
            "description": "Is the rule enabled or disabled. Ture is Enabled.",
            "example": true
          },
          "rule": {
            "type": "string",
            "description": "The description of the rule"
          }
        }
      },
      "PostApplicationWhitelistingPolicyRequest": {
        "title": "PostApplicationWhitelistingPolicyRequest",
        "required": [
          "policyName",
          "source",
          "operationMode",
          "securityAction",
          "state",
          "applicationIds"
        ],
        "type": "object",
        "properties": {
          "policyName": {
            "type": "string",
            "description": "The policy name"
          },
          "source": {
            "type": "string",
            "description": "Fortinet default policy or user defined policy",
            "enum": [
              "Fortinet",
              "User Defined"
            ]
          },
          "operationMode": {
            "type": "string",
            "description": "The policy mode",
            "enum": [
              "Simulation",
              "Prevention"
            ]
          },
          "securityAction": {
            "type": "string",
            "description": "The rule security action to apply",
            "enum": [
              "Log",
              "Block"
            ]
          },
          "state": {
            "type": "boolean",
            "description": "Enabled/Disabled.",
            "example": true
          },
          "applicationIds": {
            "type": "array",
            "description": "List of application ids that the policy apply to",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          }
        }
      },
      "PostApplicationWhitelistingPolicyResponse": {
        "title": "PostApplicationWhitelistingPolicyResponse",
        "required": [
          "policyId"
        ],
        "type": "object",
        "properties": {
          "policyId": {
            "type": "integer",
            "description": "Specifies the policy ID",
            "format": "int64"
          }
        }
      },
      "PutApplicationWhitelistingPoliciesRequest": {
        "title": "PutApplicationWhitelistingPoliciesRequest",
        "required": [
          "policyName",
          "source",
          "operationMode",
          "securityAction",
          "state",
          "applicationIds"
        ],
        "type": "object",
        "properties": {
          "policyName": {
            "type": "string",
            "description": "The policy name"
          },
          "source": {
            "type": "string",
            "description": "Fortinet default policy or user defined policy",
            "enum": [
              "Fortinet",
              "User Defined"
            ]
          },
          "operationMode": {
            "type": "string",
            "description": "The policy mode",
            "enum": [
              "Simulation",
              "Prevention"
            ]
          },
          "securityAction": {
            "type": "string",
            "description": "The rule security action to apply",
            "enum": [
              "Log",
              "Block"
            ]
          },
          "state": {
            "type": "boolean",
            "description": "Enabled/Disabled.",
            "example": true
          },
          "applicationIds": {
            "type": "array",
            "description": "List of application ids that the policy apply to",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          }
        }
      },
      "GetFileIntegrityPoliciesResponse": {
        "title": "GetFileIntegrityPoliciesResponse",
        "required": [
          "policyId",
          "policyName",
          "agentGroupIds",
          "agentGroupNames",
          "source",
          "operationMode",
          "securityAction",
          "state",
          "rule",
          "ruleId"
        ],
        "type": "object",
        "properties": {
          "policyId": {
            "type": "integer",
            "description": "Specifies the policy ID",
            "format": "int64"
          },
          "policyName": {
            "type": "string",
            "description": "The policy name"
          },
          "agentGroup": {
            "type": "array",
            "description": "The list of agent groups",
            "items": {
              "$ref": "#/components/schemas/GetPolicyAgentGroupObject"
            }
          },
          "source": {
            "type": "string",
            "description": "Fortinet default policy or user defined policy",
            "enum": [
              "Fortinet",
              "User Defined"
            ]
          },
          "operationMode": {
            "type": "string",
            "description": "The policy mode",
            "enum": [
              "Simulation",
              "Prevention"
            ]
          },
          "securityAction": {
            "type": "string",
            "description": "The rule security action to apply",
            "enum": [
              "Log",
              "Block"
            ]
          },
          "state": {
            "type": "boolean",
            "description": "Is the rule enabled or disabled. Ture is Enabled.",
            "example": true
          },
          "rule": {
            "type": "string",
            "description": "The File Integrity Profile Name"
          },
          "ruleId": {
            "type": "integer",
            "description": "The File Integrity Profile Id",
            "format": "int64"
          }
        }
      },
      "GetPolicyAgentGroupObject": {
        "title": "GetPolicyAgentGroupObject",
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The agent group id that the policy apply to",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "The agent group name that the policy apply to"
          }
        }
      },
      "PostFileIntegrityPolicyRequest": {
        "title": "PostFileIntegrityPolicyRequest",
        "required": [
          "policyName",
          "source",
          "operationMode",
          "securityAction",
          "state"
        ],
        "type": "object",
        "properties": {
          "policyName": {
            "type": "string",
            "description": "The policy name"
          },
          "source": {
            "type": "string",
            "description": "Fortinet default policy or user defined policy",
            "enum": [
              "Fortinet",
              "User Defined"
            ]
          },
          "operationMode": {
            "type": "string",
            "description": "The policy mode",
            "enum": [
              "Simulation",
              "Prevention"
            ]
          },
          "securityAction": {
            "type": "string",
            "description": "The rule security action to apply",
            "enum": [
              "Log",
              "Block"
            ]
          },
          "state": {
            "type": "boolean",
            "description": "Enabled/Disabled.",
            "example": true
          },
          "ruleId": {
            "type": "integer",
            "description": "The File Integrity Profile Id",
            "format": "int64"
          }
        }
      },
      "PostFileIntegrityPolicyResponse": {
        "title": "PostFileIntegrityPolicyResponse",
        "required": [
          "policyId"
        ],
        "type": "object",
        "properties": {
          "policyId": {
            "type": "integer",
            "description": "Specifies the policy ID",
            "format": "int64"
          }
        }
      },
      "PutFileIntegrityPoliciesRequest": {
        "title": "PutFileIntegrityPoliciesRequest",
        "required": [
          "policyName",
          "source",
          "operationMode",
          "securityAction",
          "state"
        ],
        "type": "object",
        "properties": {
          "policyName": {
            "type": "string",
            "description": "The policy name"
          },
          "source": {
            "type": "string",
            "description": "Fortinet default policy or user defined policy",
            "enum": [
              "Fortinet",
              "User Defined"
            ]
          },
          "operationMode": {
            "type": "string",
            "description": "The policy mode",
            "enum": [
              "Simulation",
              "Prevention"
            ]
          },
          "securityAction": {
            "type": "string",
            "description": "The rule security action to apply",
            "enum": [
              "Log",
              "Block"
            ]
          },
          "state": {
            "type": "boolean",
            "description": "Enabled/Disabled.",
            "example": true
          },
          "ruleId": {
            "type": "integer",
            "description": "The File Integrity Profile Id",
            "format": "int64"
          }
        }
      },
      "GetPoliciesResponse": {
        "title": "GetPoliciesResponse",
        "required": [
          "policyId",
          "policyName",
          "policyType",
          "agentGroupIds",
          "agentGroupNames",
          "source",
          "operationMode",
          "rules"
        ],
        "type": "object",
        "properties": {
          "policyId": {
            "type": "integer",
            "description": "Specifies the policy ID",
            "format": "int64"
          },
          "policyName": {
            "type": "string",
            "description": "The policy name"
          },
          "policyType": {
            "type": "integer",
            "description": "The policy type. 1 - Execution Prevention. 2 - Exfiltration Prevention. 3 - Ransomware Prevention. 4 - Device Control. 5 - Application Control. 6 - File Integrity Control.",
            "format": "int32"
          },
          "agentGroupIds": {
            "type": "array",
            "description": "List of agent group ids that the policy apply to",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "agentGroupNames": {
            "type": "array",
            "description": "List of agent group names that the policy apply to",
            "items": {
              "type": "string"
            }
          },
          "source": {
            "type": "string",
            "description": "Fortinet default policy or user defined policy",
            "enum": [
              "Fortinet",
              "User Defined"
            ]
          },
          "operationMode": {
            "type": "string",
            "description": "The policy mode",
            "enum": [
              "Simulation",
              "Prevention"
            ]
          },
          "rules": {
            "type": "array",
            "description": "list of rules included in the policy",
            "items": {
              "$ref": "#/components/schemas/SecurityRuleResponse"
            }
          }
        }
      },
      "PostPolicyRequest": {
        "title": "GetPoliciesResponse",
        "required": [
          "policyName",
          "policyType",
          "source",
          "operationMode",
          "rules"
        ],
        "type": "object",
        "properties": {
          "policyName": {
            "type": "string",
            "description": "The policy name"
          },
          "policyType": {
            "type": "integer",
            "description": "The policy type. 1 - Execution Prevention. 2 - Exfiltration Prevention. 3 - Ransomware Prevention. 4 - Device Control. 5 - Application Control. 6 - File Integrity Control.",
            "format": "int32"
          },
          "agentGroups": {
            "type": "array",
            "description": "List of agent group names that the policy apply to",
            "items": {
              "type": "string"
            }
          },
          "source": {
            "type": "string",
            "description": "Fortinet default policy or user defined policy",
            "enum": [
              "Fortinet",
              "User Defined"
            ]
          },
          "operationMode": {
            "type": "string",
            "description": "The policy mode",
            "enum": [
              "Simulation",
              "Prevention"
            ]
          },
          "rules": {
            "type": "array",
            "description": "list of rules included in the policy",
            "items": {
              "$ref": "#/components/schemas/SecurityRuleResponse"
            }
          }
        }
      },
      "PutPoliciesRequest": {
        "title": "PutPoliciesResponse",
        "type": "object",
        "properties": {
          "policyName": {
            "type": "string",
            "description": "The policy name"
          },
          "policyType": {
            "type": "integer",
            "description": "The policy type. 1 - Execution Prevention. 2 - Exfiltration Prevention. 3 - Ransomware Prevention. 4 - Device Control. 5 - Application Control. 6 - File Integrity Control.",
            "format": "int32"
          },
          "agentGroups": {
            "type": "array",
            "description": "List of agent group names that the policy apply to",
            "items": {
              "type": "string"
            }
          },
          "source": {
            "type": "string",
            "description": "Fortinet default policy or user defined policy",
            "enum": [
              "Fortinet",
              "User Defined"
            ]
          },
          "operationMode": {
            "type": "string",
            "description": "The policy mode",
            "enum": [
              "Simulation",
              "Prevention"
            ]
          },
          "rules": {
            "type": "array",
            "description": "list of rules included in the policy",
            "items": {
              "$ref": "#/components/schemas/SecurityRuleRequest"
            }
          }
        }
      },
      "SecurityRuleRequest": {
        "title": "SecurityRuleRequest",
        "required": [
          "ruleIndex",
          "securityAction",
          "state"
        ],
        "type": "object",
        "properties": {
          "ruleIndex": {
            "type": "integer",
            "description": "Rule index\nExecution Prevention Rules\n1 Malicious File Detected\n2 Privilege Escalation Exploit Detected - A malicious escalation of privileges was detected\n3 Sandbox Analysis - File was sent to the sandbox for analysis\n4 Stack Pivot - Stack Pointer is Out of Bounds\n5 Suspicious Driver Load - Attempt to load a suspicious driver\n6 Suspicious File Detected\n7 Suspicious Script Execution - A script was executed in a suspicious context\n8 Unconfirmed File Detected\nExfiltration Prevention Rules\n1 Access to Critical System Information\n2 Bruteforce Attempt Detected\n3 Debugged Process - Connection from a Debugged Process\n4 Dynamic Code - Malicious Runtime Generated Code Detected\n5 Executable Format - Bad Executable File Format\n6 Executable Stack - A Stack with Executable Code\n7 Executed Program has no installer\n8 Fake Critical Program - Program Attempted to Hide as a Service\n9 Fake Packer - A Fake Known Packer Detected\n10 Hidden Process - Connection Attempt from a Hidden Process\n11 Injected Executable - Connection Attempt from an Injected Executable\n12 Injected Process - Process Created from an Injected Thread\n13 Injected Thread - Connection from an Injected Thread\n14 Invalid Checksum - Connection Attempt from Application with Invalid Checksum\n15 Invalid Execution - Code Executed from an Invalid Memory Location\n16 Invalid Pointer - Invalid Stack Pointer Value\n17 Kernel Injection - Code Injected from Kernel to User Mode\n18 Keylogging Activity Detected\n19 Known Packer - Activity by an Application packed by a Known Packer was detected\n20 Malicious File Detected\n21 Malicious Process - A Process is Interfering with Agent's Operation\n22 Malicious Website Detected - Attempt to access a malicious website, domain or IP address\n23 Modified Executable - Connection from an In-Memory Modified Executable\n24 Network Scanning Attempt Detectet\n25 Non-standard Communication - Use of non-standard communication method detected\n26 PUP - Potentially Unwanted Program\n27 Partially Mapped - Partially Mapped Executable File on Stack\n28 Privilege Escalation Exploit Detected - A malicious escalation of privileges was detected\n29 Process Hollowing - Process Code Was Replaced\n30 Process Injection - Entry Point Modification Detected\n31 Protected System Configuration - Modification Attempt of Protected Configuration\n32 Stack Pivot - Stack Pointer is Out of Bounds\n33 Stack Tampering - Stack Collection Interrupted\n34 Suspicious Application - Connection Attempt from a Suspicious Application\n35 Suspicious Macro - A macro has performed suspicious actions\n36 Suspicious Packer - Activity by an Application packed by a Suspicious Packer was detected\nRansomware Prevention Rules\n1 Debugged Process - Connection from a Debugged Process\n2 Disk encryption attempt detected - Suspicious full disk encryption was detected\n3 Dynamic Code - Malicious Runtime Generated Code Detected\n4 Executable Format - Bad Executable File Format\n5 Executable Stack - A Stack with Executable Code\n6 Executed Program has no installer\n7 Fake Critical Program - Program Attempted to Hide as a Service\n8 Fake Packer - A Fake Known Packer Detected\n9 File Encryptor - Suspicious file modification\n10 Hidden Process - Connection Attempt from a Hidden Process\n11 Injected Executable - Connection Attempt from an Injected Executable\n12 Injected Process - Process Created from an Injected Thread\n13 Injected Thread - Connection from an Injected Thread\n14 Invalid Checksum - Connection Attempt from Application with Invalid Checksum\n15 Invalid Execution - Code Executed from an Invalid Memory Location\n16 Invalid Pointer - Invalid Stack Pointer Value\n17 Kernel Injection - Code Injected from Kernel to User Mode\n18 Known Packer - Activity by an Application packed by a Known Packer was detected\n19 Malicious File Detected\n20 Malicious Process - A Process is Interfering with Agent's Operation\n21 Modified Executable - Connection from an In-Memory Modified Executable\n22 PUP - Potentially Unwanted Program\n23 Partially Mapped - Partially Mapped Executable File on Stack\n24 Privilege Escalation Exploit Detected - A malicious escalation of privileges was detected\n25 Process Hollowing - Process Code Was Replaced\n26 Process Injection - Entry Point Modification Detected\n27 Stack Pivot - Stack Pointer is Out of Bounds\n28 Stack Tampering - Stack Collection Interrupted\n29 Suspicious Application - Connection Attempt from a Suspicious Application\n30 Suspicious Packer - Activity by an Application packed by a Suspicious Packer was detected\n31 Tampered Executable - Critical Executable was Tampered With\n32 Unconfirmed Executable - Executable File Failed Verification Test\n33 Unmapped Executable - Executable File Without a Corresponding File System Reference\n34 Writeable Code - Identified an Executable with Writable Code\nDevice Control Rules\n1 USB Application Specific Device Detected\n2 USB Audio Device Detected\n3 USB Audio/Video Device Detected\n4 USB Base Class Device Detected\n5 USB Billboard Device Detected\n6 USB CDC-Data Device Detected\n7 USB Communications and CDC Control Device Detected\n8 USB Content Security Device Detected\n9 USB Diagnostic Device Detected\n10 USB Hub Detected\n11 USB Human Interface Control Device Detected\n12 USB Mass Storage Device Detected\n13 USB Miscellaneous Device Detected\n14 USB Personal Healthcare Device Detected\n15 USB Physical Device Detected\n16 USB Printer Detected\n17 USB Smart Card Detected\n18 USB Still Imaging Device Detected\n19 USB Type-C Bridge Device Detected\n20 USB Unknown Device Detected\n21 USB Vendor Specific Device Detected\n22 USB Video Detected\n23 USB Wireless Controller Device Detected",
            "format": "int32"
          },
          "securityAction": {
            "type": "string",
            "description": "The rule security action to apply",
            "enum": [
              "Log",
              "Block"
            ]
          },
          "state": {
            "type": "boolean",
            "description": "Is the rule enabled or disabled. Ture is Enabled.",
            "example": true
          }
        }
      },
      "SecurityRuleResponse": {
        "title": "SecurityRuleResponse",
        "required": [
          "ruleIndex",
          "securityAction",
          "state"
        ],
        "type": "object",
        "properties": {
          "ruleIndex": {
            "type": "integer",
            "description": "Rule index\nExecution Prevention Rules\n1 Malicious File Detected\n2 Privilege Escalation Exploit Detected - A malicious escalation of privileges was detected\n3 Sandbox Analysis - File was sent to the sandbox for analysis\n4 Stack Pivot - Stack Pointer is Out of Bounds\n5 Suspicious Driver Load - Attempt to load a suspicious driver\n6 Suspicious File Detected\n7 Suspicious Script Execution - A script was executed in a suspicious context\n8 Unconfirmed File Detected\nExfiltration Prevention Rules\n1 Access to Critical System Information\n2 Bruteforce Attempt Detected\n3 Debugged Process - Connection from a Debugged Process\n4 Dynamic Code - Malicious Runtime Generated Code Detected\n5 Executable Format - Bad Executable File Format\n6 Executable Stack - A Stack with Executable Code\n7 Executed Program has no installer\n8 Fake Critical Program - Program Attempted to Hide as a Service\n9 Fake Packer - A Fake Known Packer Detected\n10 Hidden Process - Connection Attempt from a Hidden Process\n11 Injected Executable - Connection Attempt from an Injected Executable\n12 Injected Process - Process Created from an Injected Thread\n13 Injected Thread - Connection from an Injected Thread\n14 Invalid Checksum - Connection Attempt from Application with Invalid Checksum\n15 Invalid Execution - Code Executed from an Invalid Memory Location\n16 Invalid Pointer - Invalid Stack Pointer Value\n17 Kernel Injection - Code Injected from Kernel to User Mode\n18 Keylogging Activity Detected\n19 Known Packer - Activity by an Application packed by a Known Packer was detected\n20 Malicious File Detected\n21 Malicious Process - A Process is Interfering with Agent's Operation\n22 Malicious Website Detected - Attempt to access a malicious website, domain or IP address\n23 Modified Executable - Connection from an In-Memory Modified Executable\n24 Network Scanning Attempt Detectet\n25 Non-standard Communication - Use of non-standard communication method detected\n26 PUP - Potentially Unwanted Program\n27 Partially Mapped - Partially Mapped Executable File on Stack\n28 Privilege Escalation Exploit Detected - A malicious escalation of privileges was detected\n29 Process Hollowing - Process Code Was Replaced\n30 Process Injection - Entry Point Modification Detected\n31 Protected System Configuration - Modification Attempt of Protected Configuration\n32 Stack Pivot - Stack Pointer is Out of Bounds\n33 Stack Tampering - Stack Collection Interrupted\n34 Suspicious Application - Connection Attempt from a Suspicious Application\n35 Suspicious Macro - A macro has performed suspicious actions\n36 Suspicious Packer - Activity by an Application packed by a Suspicious Packer was detected\nRansomware Prevention Rules\n1 Debugged Process - Connection from a Debugged Process\n2 Disk encryption attempt detected - Suspicious full disk encryption was detected\n3 Dynamic Code - Malicious Runtime Generated Code Detected\n4 Executable Format - Bad Executable File Format\n5 Executable Stack - A Stack with Executable Code\n6 Executed Program has no installer\n7 Fake Critical Program - Program Attempted to Hide as a Service\n8 Fake Packer - A Fake Known Packer Detected\n9 File Encryptor - Suspicious file modification\n10 Hidden Process - Connection Attempt from a Hidden Process\n11 Injected Executable - Connection Attempt from an Injected Executable\n12 Injected Process - Process Created from an Injected Thread\n13 Injected Thread - Connection from an Injected Thread\n14 Invalid Checksum - Connection Attempt from Application with Invalid Checksum\n15 Invalid Execution - Code Executed from an Invalid Memory Location\n16 Invalid Pointer - Invalid Stack Pointer Value\n17 Kernel Injection - Code Injected from Kernel to User Mode\n18 Known Packer - Activity by an Application packed by a Known Packer was detected\n19 Malicious File Detected\n20 Malicious Process - A Process is Interfering with Agent's Operation\n21 Modified Executable - Connection from an In-Memory Modified Executable\n22 PUP - Potentially Unwanted Program\n23 Partially Mapped - Partially Mapped Executable File on Stack\n24 Privilege Escalation Exploit Detected - A malicious escalation of privileges was detected\n25 Process Hollowing - Process Code Was Replaced\n26 Process Injection - Entry Point Modification Detected\n27 Stack Pivot - Stack Pointer is Out of Bounds\n28 Stack Tampering - Stack Collection Interrupted\n29 Suspicious Application - Connection Attempt from a Suspicious Application\n30 Suspicious Packer - Activity by an Application packed by a Suspicious Packer was detected\n31 Tampered Executable - Critical Executable was Tampered With\n32 Unconfirmed Executable - Executable File Failed Verification Test\n33 Unmapped Executable - Executable File Without a Corresponding File System Reference\n34 Writeable Code - Identified an Executable with Writable Code\nDevice Control Rules\n1 USB Application Specific Device Detected\n2 USB Audio Device Detected\n3 USB Audio/Video Device Detected\n4 USB Base Class Device Detected\n5 USB Billboard Device Detected\n6 USB CDC-Data Device Detected\n7 USB Communications and CDC Control Device Detected\n8 USB Content Security Device Detected\n9 USB Diagnostic Device Detected\n10 USB Hub Detected\n11 USB Human Interface Control Device Detected\n12 USB Mass Storage Device Detected\n13 USB Miscellaneous Device Detected\n14 USB Personal Healthcare Device Detected\n15 USB Physical Device Detected\n16 USB Printer Detected\n17 USB Smart Card Detected\n18 USB Still Imaging Device Detected\n19 USB Type-C Bridge Device Detected\n20 USB Unknown Device Detected\n21 USB Vendor Specific Device Detected\n22 USB Video Detected\n23 USB Wireless Controller Device Detected",
            "format": "int32"
          },
          "securityAction": {
            "type": "string",
            "description": "The rule security action to apply",
            "enum": [
              "Log",
              "Block"
            ]
          },
          "state": {
            "type": "boolean",
            "description": "Is the rule enabled or disabled. Ture is Enabled.",
            "example": true
          }
        }
      },
      "PostLogServerRequest": {
        "title": "PostLogServerRequest",
        "required": [
          "logServerName",
          "status",
          "ipAddress",
          "protocol",
          "port"
        ],
        "type": "object",
        "properties": {
          "logServerName": {
            "type": "string",
            "description": "log server name"
          },
          "status": {
            "type": "boolean",
            "description": "A true/false parameter indication if the log server\nis enabled.",
            "example": false
          },
          "logForwardingProfileIds": {
            "type": "array",
            "description": "Logged users",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "ipAddress": {
            "type": "string",
            "description": "IP address"
          },
          "protocol": {
            "type": "string",
            "description": "Protocol"
          },
          "port": {
            "type": "integer",
            "description": "Log server port",
            "format": "int32"
          }
        }
      },
      "PostLogServerResponse": {
        "title": "PostLogServerResponse",
        "required": [
          "logServerId"
        ],
        "type": "object",
        "properties": {
          "logServerId": {
            "type": "integer",
            "description": "Specifies the log server ID",
            "format": "int64"
          }
        }
      },
      "PutLogServerRequest": {
        "title": "PutLogServerRequest",
        "required": [
          "logServerName",
          "status",
          "logForwardingProfileIds",
          "protocol",
          "port",
          "ipAddress"
        ],
        "type": "object",
        "properties": {
          "logServerName": {
            "type": "string",
            "description": "log server name"
          },
          "status": {
            "type": "boolean",
            "description": "A true/false parameter indication if the log server\nis enabled.",
            "example": false
          },
          "logForwardingProfileIds": {
            "type": "array",
            "description": "Log forwarding profile Ids",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "protocol": {
            "type": "string",
            "description": "Protocol"
          },
          "port": {
            "type": "integer",
            "description": "Log server port",
            "format": "int32"
          },
          "ipAddress": {
            "type": "string",
            "description": "IP address"
          }
        }
      },
      "GetFirmwareInformation": {
        "title": "GetFirmwareInformation",
        "type": "object",
        "properties": {
          "firmwareVersion": {
            "type": "string",
            "description": "firmware version"
          }
        }
      },
      "UpdateAgentConfigurationRequest": {
        "title": "UpdateAgentConfigurationRequest",
        "type": "object",
        "properties": {
          "automaticallyUpgrade": {
            "type": "boolean",
            "description": "Automatically upgrade agents to the latest patch version.",
            "example": false
          }
        }
      },
      "GetLogServersResponse": {
        "title": "GetLogServersResponse",
        "required": [
          "logServerName",
          "logServerId",
          "status",
          "ipAddress",
          "protocol",
          "port"
        ],
        "type": "object",
        "properties": {
          "logServerName": {
            "type": "string",
            "description": "log server name"
          },
          "logServerId": {
            "type": "integer",
            "description": "Log server id",
            "format": "int64"
          },
          "status": {
            "type": "boolean",
            "description": "A true/false parameter indication if the log server\nis enabled.",
            "example": false
          },
          "logForwardingProfileIds": {
            "type": "array",
            "description": "Log forwarding profile Id",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "logForwardingProfileNames": {
            "type": "array",
            "description": "Logged users",
            "items": {
              "type": "string"
            }
          },
          "ipAddress": {
            "type": "string",
            "description": "IP address"
          },
          "protocol": {
            "type": "string",
            "description": "Protocol"
          },
          "port": {
            "type": "integer",
            "description": "Log server port",
            "format": "int32"
          }
        }
      },
      "GetEventsResponse": {
        "title": "GetEventsResponse",
        "required": [
          "eventId",
          "classification",
          "seen",
          "handled",
          "agents",
          "process",
          "destinations",
          "firstSeen",
          "lastSeen",
          "processOwner",
          "certified",
          "processPath",
          "mute"
        ],
        "type": "object",
        "properties": {
          "eventId": {
            "type": "integer",
            "description": "Specifies the ID of the event",
            "format": "int64"
          },
          "classification": {
            "type": "string",
            "description": "Classification",
            "enum": [
              "Malicious",
              "Suspicious",
              "Inconclusive",
              "Likely Safe",
              "PUP",
              "Safe"
            ]
          },
          "seen": {
            "type": "boolean",
            "description": "A true/false parameter indicating whether events were read/unread\nby the user operating the API",
            "example": false
          },
          "handled": {
            "type": "boolean",
            "description": "A true/false parameter indicating whether events were handled/unhandled",
            "example": false
          },
          "agent": {
            "$ref": "#/components/schemas/AgentsInGetEventsResponse"
          },
          "process": {
            "type": "string",
            "description": "Specifies the name of the main process of the event"
          },
          "destinations": {
            "type": "array",
            "description": "For example, FIM FILE WRITE/ DEVICE CONTROL/...",
            "items": {
              "type": "string"
            }
          },
          "firstSeen": {
            "type": "string",
            "description": "Specifies the date when this event was first seen"
          },
          "lastSeen": {
            "type": "string",
            "description": "Specifies the date when this event was last seen"
          },
          "processOwner": {
            "type": "string",
            "description": "Indicates the process owner"
          },
          "certified": {
            "type": "boolean",
            "description": "Indicates whether the main process is signed",
            "example": false
          },
          "processPath": {
            "type": "string",
            "description": "Specifies the path of the main process"
          },
          "rawDataItems": {
            "type": "integer",
            "description": "Indicate the number of raw data items associated with this event.",
            "format": "int64"
          },
          "action": {
            "type": "string",
            "description": "A string with one of the following values",
            "enum": [
              "Block",
              "SimulationBlock",
              "Log"
            ]
          },
          "severity": {
            "type": "string",
            "description": "Indicates the severity (Deprecated)",
            "enum": [
              "Critical",
              "High",
              "Medium"
            ]
          },
          "rules": {
            "type": "array",
            "description": "Specifies list of the short rule name of the rules that triggered\nthe events",
            "items": {
              "type": "string"
            }
          },
          "loggedUsers": {
            "type": "array",
            "description": "Specifies list of logged users",
            "items": {
              "type": "string"
            }
          },
          "processType": {
            "type": "string",
            "description": "Specifies the process type, which can be 32 bit or 64 bit"
          },
          "organization": {
            "type": "string",
            "description": "The organization of the event"
          },
          "archived": {
            "type": "boolean",
            "description": "A true/false parameter indicating whetether include archived\nevents",
            "example": false
          },
          "comment": {
            "type": "string",
            "description": "Specifies a user-defined string attached to the event"
          },
          "mute": {
            "type": "boolean",
            "description": "A true/false parameter indicating whether to mute events",
            "example": false
          },
          "muteDuration": {
            "type": "string",
            "description": "Specifies the mute duration time",
            "enum": [
              "Week",
              "Month",
              "Year",
              "Permanently"
            ]
          },
          "muteEndTime": {
            "type": "string",
            "description": "Indicates the mute end time"
          }
        }
      },
      "AgentsInGetEventsResponse": {
        "title": "AgentsInGetEventsResponse",
        "type": "object",
        "properties": {
          "agentId": {
            "type": "integer",
            "description": "ID",
            "format": "int64"
          },
          "agentName": {
            "type": "string",
            "description": "Specifies the agent name"
          },
          "operatingSystem": {
            "type": "string",
            "description": "Specifies the operating system of the device"
          },
          "lastSeenTime": {
            "type": "string",
            "description": "Specifies the date when the agent was last seen"
          },
          "ipAddress": {
            "type": "string",
            "description": "Specifies the IP of the device"
          },
          "agentGroupName": {
            "type": "string",
            "description": "Specifies the name of the agent group to which the agent belongs"
          },
          "agentGroupId": {
            "type": "integer",
            "description": "Specifies the id of the agent group to which the agent belongs",
            "format": "int64"
          },
          "macAddresses": {
            "type": "string",
            "description": "MAC addresses"
          }
        }
      },
      "GetRawEventsResponseInterface": {
        "title": "GetRawEventsResponseInterface",
        "required": [
          "rawEventId",
          "device",
          "processOwner",
          "destination",
          "firstSeen",
          "lastSeen",
          "loggedUsers",
          "count"
        ],
        "type": "object",
        "properties": {
          "rawEventId": {
            "type": "integer",
            "description": "Specifies the raw event id",
            "format": "int64"
          },
          "device": {
            "type": "string",
            "description": "Specifies the device name"
          },
          "deviceIp": {
            "type": "string",
            "description": "Specifies the IP of the device"
          },
          "processOwner": {
            "type": "string",
            "description": "Indicates the process owner"
          },
          "destination": {
            "type": "string",
            "description": "Specifies the destination"
          },
          "firstSeen": {
            "type": "string",
            "description": "Specifies the date when the agent was first seen"
          },
          "lastSeen": {
            "type": "string",
            "description": "Specifies the date when the agent was last seen"
          },
          "loggedUsers": {
            "type": "array",
            "description": "logged Users",
            "items": {
              "type": "string"
            }
          },
          "count": {
            "type": "integer",
            "description": "Count",
            "format": "int64"
          },
          "agentGroups": {
            "type": "string",
            "description": "Specifies the name of the agent group to which the agent belongs"
          },
          "agentGroupIds": {
            "type": "integer",
            "description": "Specifies the id of the agent group to which the agent belongs",
            "format": "int64"
          }
        }
      },
      "Map": {
        "title": "Map",
        "type": "object",
        "additionalProperties": {
          "type": "object",
          "properties": {}
        }
      },
      "UpdateExceptionRequest": {
        "title": "UpdateExceptionRequest",
        "type": "object",
        "properties": {
          "useAnyPath": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": {
                "type": "boolean"
              }
            },
            "description": "For each relevant process in each relevant rule, the user must\nindicate true/false to set an exception on the path that was seen in the\nevent or for any path"
          },
          "useInException": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": {
                "type": "boolean"
              }
            },
            "description": "For each relevant process in each relevant rule, the user must\nindicate true/false in order to include it in the exception"
          },
          "wildcardFiles": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": {
                "type": "boolean"
              }
            },
            "description": "For each relevant process in each relevant rule filename, check\nif pattern matches the file value, and according to action (true/false)\nattach/remove the exception wildcard field"
          },
          "wildcardPaths": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": {
                "type": "boolean"
              }
            },
            "description": "For each relevant process in each relevant rule path name,\ncheck if pattern matches the file value, and according to action (true/false)\nattach/remove the exception wildcard field"
          }
        }
      },
      "UpdateEventsRequest": {
        "title": "UpdateEventsRequest",
        "type": "object",
        "properties": {
          "seen": {
            "type": "boolean",
            "description": "A true/false parameter indicating whether the events are read/unread by the user\noperating the API",
            "example": false
          },
          "handled": {
            "type": "boolean",
            "description": "A true/false parameter indicating update the events handled/unhandled",
            "example": false
          },
          "classification": {
            "type": "string",
            "description": "Specifies the event classification",
            "enum": [
              "Malicious",
              "Suspicious",
              "Inconclusive",
              "Likely Safe",
              "PUP",
              "Safe"
            ]
          },
          "malwareType": {
            "type": "string",
            "description": "Specifies the event malware type"
          },
          "comment": {
            "type": "string",
            "description": "Specifies a user-defined string attached to the event"
          },
          "familyName": {
            "type": "string",
            "description": "Specifies the event family name"
          },
          "forceUnmute": {
            "type": "boolean",
            "description": "Indicates whether to force archive even if the event is muted",
            "example": false
          },
          "archive": {
            "type": "boolean",
            "description": "A true/false parameter indicating whether to update archived\nevents",
            "example": false
          },
          "mute": {
            "type": "boolean",
            "description": "A true/false parameter indicating whether to mute events",
            "example": false
          },
          "muteDuration": {
            "type": "string",
            "description": "Specifies the mute duration time",
            "enum": [
              "Week",
              "Month",
              "Year",
              "Permanently"
            ]
          },
          "threatName": {
            "type": "string",
            "description": "Specifies the event threat name"
          },
          "muteEndTime": {
            "type": "string",
            "description": "Indicates the mute end time"
          }
        }
      },
      "CreateAccountRequest": {
        "title": "CreateAccountRequest",
        "required": [
          "expirationDate",
          "name",
          "password",
          "passwordConfirmation"
        ],
        "type": "object",
        "properties": {
          "expirationDate": {
            "type": "string",
            "description": "Specifies the license expiration date. Specify the date using\nthe following date format yyyy-MM-dd"
          },
          "iotAllocated": {
            "minimum": 0,
            "exclusiveMinimum": false,
            "type": "integer",
            "description": "Specifies the IoT device’s license capacity",
            "format": "int64"
          },
          "password": {
            "type": "string",
            "description": "Specifies the device registration password name"
          },
          "passwordConfirmation": {
            "type": "string",
            "description": "Specifies the confirm device registration password name"
          },
          "serialNumber": {
            "type": "string",
            "description": "Specifies the serial number"
          },
          "serversAllocated": {
            "minimum": 0,
            "exclusiveMinimum": false,
            "type": "integer",
            "description": "Specifies the server agent’s license capacity",
            "format": "int64"
          },
          "workstationsAllocated": {
            "minimum": 0,
            "exclusiveMinimum": false,
            "type": "integer",
            "description": "Specifies the workstation agent’s license capacity",
            "format": "int64"
          }
        }
      },
      "AccountResponse": {
        "title": "AccountResponse",
        "type": "object",
        "properties": {
          "expirationDate": {
            "type": "string",
            "description": "Expiration date"
          },
          "iotAllocated": {
            "type": "integer",
            "description": "Specifics the iot devices allocated ",
            "format": "int64"
          },
          "iotInUse": {
            "type": "integer",
            "description": "Specifics the iot devices account in use",
            "format": "int64"
          },
          "isAdminAccount": {
            "type": "boolean",
            "description": "Is admin account",
            "example": false
          },
          "name": {
            "type": "string",
            "description": "Account name"
          },
          "organizationId": {
            "type": "integer",
            "description": "Specifics the organization ID ",
            "format": "int32"
          },
          "repositoryAddOns": {
            "type": "integer",
            "description": "Specifics the repository add-ons",
            "format": "int64"
          },
          "serialNumber": {
            "type": "string",
            "description": "serial number"
          },
          "serversAllocated": {
            "type": "integer",
            "description": "Specifics the servers allocated ",
            "format": "int64"
          },
          "serversInUse": {
            "type": "integer",
            "description": "Specifics the server account in use",
            "format": "int64"
          },
          "verificationCode": {
            "type": "string",
            "description": "The migration verification code"
          },
          "workstationsAllocated": {
            "type": "integer",
            "description": "Specifics the work stations allocated ",
            "format": "int64"
          },
          "workstationsInUse": {
            "type": "integer",
            "description": "Specifics the work stations account in use",
            "format": "int64"
          }
        }
      },
      "AccountRequest": {
        "title": "AccountRequest",
        "type": "object",
        "properties": {
          "expirationDate": {
            "type": "string",
            "description": "Specifies the license expiration date. Specify the date using\nthe following date format yyyy-MM-dd"
          },
          "iotAllocated": {
            "minimum": 0,
            "exclusiveMinimum": false,
            "type": "integer",
            "description": "Specifies the IoT device’s license capacity",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "Specifies the organization name"
          },
          "serialNumber": {
            "type": "string",
            "description": "Specifies the serial number"
          },
          "serversAllocated": {
            "minimum": 0,
            "exclusiveMinimum": false,
            "type": "integer",
            "description": "Specifies the server agent’s license capacity",
            "format": "int64"
          },
          "workstationsAllocated": {
            "minimum": 0,
            "exclusiveMinimum": false,
            "type": "integer",
            "description": "Specifies the workstation agent’s license capacity",
            "format": "int64"
          }
        }
      },
      "GetImportAccountResponse": {
        "title": "GetImportAccountResponse",
        "type": "object",
        "properties": {
          "organization": {
            "type": "string",
            "description": "Organization Name"
          },
          "organizationId": {
            "type": "integer",
            "description": "Organization ID",
            "format": "int64"
          },
          "verificationCode": {
            "type": "string",
            "description": "Import verification code"
          }
        }
      },
      "GetImportSystemResponse": {
        "title": "GetImportSystemResponse",
        "type": "object",
        "properties": {
          "verificationCode": {
            "type": "string",
            "description": "Import verification code"
          }
        }
      },
      "TransferAgentsRequest": {
        "title": "TransferAgentsRequest",
        "required": [
          "aggregatorsMap",
          "sourceOrganization",
          "targetOrganization",
          "verificationCode"
        ],
        "type": "object",
        "properties": {
          "aggregatorsMap": {
            "type": "array",
            "description": "Specifies aggregators transfer mapping",
            "items": {
              "$ref": "#/components/schemas/AggregatorMap"
            }
          },
          "sourceOrganization": {
            "type": "string",
            "description": "Specifies the organization which agents will be transferred from."
          },
          "targetOrganization": {
            "type": "string",
            "description": "Specifies the organization which agents will be transferred to."
          },
          "verificationCode": {
            "type": "string",
            "description": "Specifies the verification code to validate the import step\nwas finished successfully."
          }
        }
      },
      "AggregatorMap": {
        "title": "AggregatorMap",
        "required": [
          "sourceAggregatorId",
          "targetAggregatorDestination",
          "targetAggregatorPort"
        ],
        "type": "object",
        "properties": {
          "sourceAggregatorId": {
            "type": "integer",
            "description": "Specifies the source aggregator ID",
            "format": "int64"
          },
          "targetAggregatorDestination": {
            "type": "string",
            "description": "Specifies the target aggregator destination ip or dns"
          },
          "targetAggregatorPort": {
            "type": "integer",
            "description": "Specifies the target aggregator destination port",
            "format": "int32"
          }
        }
      },
      "FileIntegrityMonitoringProfileUpdateRequest": {
        "title": "FileIntegrityMonitoringProfileRequest",
        "required": [
          "associatedAgentGroupIds",
          "name",
          "organization",
          "fileIntegrityMonitoringCategoryList"
        ],
        "type": "object",
        "properties": {
          "associatedAgentGroupIds": {
            "type": "array",
            "description": "List of associated agent groups Ids, for example [1,2,3].",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "name": {
            "type": "string",
            "description": "File integrity monitoring profile name."
          },
          "newName": {
            "type": "string",
            "description": "New profile name. Optional."
          },
          "organizationId": {
            "type": "integer",
            "description": "Organization ID",
            "format": "int64"
          },
          "fileIntegrityMonitoringCategoryList": {
            "type": "array",
            "description": "File Integrity Monitoring Categories",
            "items": {
              "$ref": "#/components/schemas/FileIntegrityMonitoringCategoryDtoItem"
            }
          }
        }
      },
      "FileIntegrityMonitoringCategoryDtoItem": {
        "title": "FileIntegrityMonitoringCategoryDtoItem",
        "required": [
          "enabled",
          "eventTypes",
          "identifier"
        ],
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "When set to True the File Integrity event type category is\nenabled.",
            "example": false
          },
          "eventTypes": {
            "type": "array",
            "description": "A subset of the category's event types (identifiers) which\nwill be set to Enabled. For example [\"Process Termination\", \"Process Creation\"]",
            "items": {
              "type": "string"
            }
          },
          "identifier": {
            "type": "string",
            "description": "File Integrity Monitoring event type category identifier"
          }
        }
      },
      "ApplicationWhitelistingPolicyResponse": {
        "title": "ApplicationWhitelistingPolicyResponse",
        "required": [
          "agentGroupIds",
          "state",
          "mode"
        ],
        "type": "object",
        "properties": {
          "agentGroupIds": {
            "type": "array",
            "description": "List of associated agent groups Ids, for example [1,2,3].",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "state": {
            "type": "boolean",
            "description": "Enabled/Disabled.",
            "example": false
          },
          "mode": {
            "type": "string",
            "description": "Application whitelisting Policy mode. Prevention/Simulation."
          }
        }
      },
      "ApplicationWhitelistingPolicyRequest": {
        "title": "ApplicationWhitelistingPolicyRequest",
        "required": [
          "agentGroupIds",
          "state",
          "mode"
        ],
        "type": "object",
        "properties": {
          "agentGroupIds": {
            "type": "array",
            "description": "List of associated agent groups Ids, for example [1,2,3].",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "state": {
            "type": "boolean",
            "description": "Enabled/Disabled.",
            "example": false
          },
          "mode": {
            "type": "string",
            "description": "Application whitelisting Policy mode. Prevention/Simulation."
          }
        }
      },
      "FileIntegrityMonitoringProfileResponse": {
        "title": "FileIntegrityMonitoringProfileResponse",
        "required": [
          "associatedAgentGroupIds",
          "immutable",
          "name",
          "FileIntegrityMonitoringCategoryList"
        ],
        "type": "object",
        "properties": {
          "associatedAgentGroupIds": {
            "type": "array",
            "description": "List of associated agent groups Ids, for example [1,2,3].",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "immutable": {
            "type": "boolean",
            "description": "When true this profile cannot be modified.",
            "example": false
          },
          "name": {
            "type": "string",
            "description": "File Integrity Monitoring profile name."
          },
          "fileIntegrityMonitoringCategoryList": {
            "type": "array",
            "description": "File Integrity Monitoring Categories",
            "items": {
              "$ref": "#/components/schemas/FileIntegrityMonitoringCategoryDtoItem"
            }
          }
        }
      },
      "AgentGroupResponse": {
        "title": "AgentGroupResponse",
        "required": [
          "id",
          "name",
          "numberOfAgents"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The Id of Agent group.",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "The Agent group name."
          },
          "numberOfAgents": {
            "type": "integer",
            "description": "Number of agents associated with this group.",
            "format": "int64"
          }
        }
      },
      "CreateExclusionsRequest": {
        "title": "CreateExclusionsRequest",
        "required": [
          "exclusionListName",
          "exclusions",
          "organization"
        ],
        "type": "object",
        "properties": {
          "exclusionListName": {
            "type": "string",
            "description": "Exclusions created in the request will be associated with this\nlist."
          },
          "exclusions": {
            "type": "array",
            "description": "List of exclusions definitions to be created.",
            "items": {
              "$ref": "#/components/schemas/CommonExclusionDtoItem"
            }
          },
          "organizationId": {
            "type": "integer",
            "format": "int64",
            "description": "Specifies the id of a specific organization. The value that you specify here must match exactly"
          }
        }
      },
      "CommonExclusionDtoItem": {
        "title": "CommonExclusionDtoItem",
        "required": [
          "attributes",
          "enabled",
          "eventTypes",
          "operatingSystems"
        ],
        "type": "object",
        "properties": {
          "attributes": {
            "type": "array",
            "description": "The list of exclusion attributes (identifiers) defining this\nexclusion.",
            "items": {
              "$ref": "#/components/schemas/RuleAttributeDtoItem"
            }
          },
          "comments": {
            "type": "string",
            "description": "The exclusion's comments."
          },
          "enabled": {
            "type": "boolean",
            "description": "Exclusion enabled/disabled status.",
            "example": false
          },
          "eventTypes": {
            "type": "array",
            "description": "The list of File Integrity Monitoring event types (identifiers) covered\nby this exclusion.",
            "items": {
              "type": "string"
            }
          },
          "operatingSystems": {
            "type": "string",
            "description": "The exclusion's enabled operating system."
          }
        }
      },
      "RuleAttributeDtoItem": {
        "title": "RuleAttributeDtoItem",
        "required": [
          "ruleType",
          "type",
          "contents"
        ],
        "type": "object",
        "properties": {
          "ruleType": {
            "type": "string",
            "description": "Exclusion rule or Inclusion rule.",
            "enum": [
              "Inclusion",
              "Exclusion"
            ]
          },
          "type": {
            "type": "string",
            "description": "The attribute type, either Source or Target.",
            "enum": [
              "Source",
              "Target"
            ]
          },
          "contents": {
            "type": "array",
            "description": "Content within this rule attribute.",
            "items": {
              "$ref": "#/components/schemas/RuleAttributeContentDtoItem"
            }
          }
        }
      },
      "RuleAttributeContentDtoItem": {
        "title": "RuleAttributeContentDtoItem",
        "required": [
          "identifier",
          "value"
        ],
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string",
            "description": "The attribute name. If the attribute type is \"Source\", the identifier only supports FileName/Hash/Path/Signer.",
            "enum": [
              "File Name",
              "Hash",
              "Path",
              "Signer",
              "Key Path",
              "Value Name",
              "Value Type",
              "Value Size",
              "Remote IP",
              "Remote Port",
              "Local Port"
            ]
          },
          "value": {
            "type": "string",
            "description": "The attribute value."
          },
          "secondaryValue": {
            "type": "string",
            "description": "Secondary property identifying the attribute. Used in special\ncases like with the Signer attribute."
          }
        }
      },
      "FileIntegrityProfileResponse": {
        "title": "FileIntegrityProfileResponse",
        "required": [
          "profileId",
          "profileName",
          "state",
          "policyIds",
          "policyNames",
          "lastDateModified",
          "lastUserModifier",
          "rules"
        ],
        "type": "object",
        "properties": {
          "profileId": {
            "type": "integer",
            "description": "The profile id",
            "format": "int64"
          },
          "profileName": {
            "type": "string",
            "description": "The profile name"
          },
          "state": {
            "type": "boolean",
            "description": "Is the profile enabled or disabled. Ture is Enabled.",
            "example": true
          },
          "policyIds": {
            "type": "array",
            "description": "List of policy ids that the profile apply to",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "policyNames": {
            "type": "array",
            "description": "List of policy names that the profile apply to",
            "items": {
              "type": "string"
            }
          },
          "lastDateModified": {
            "type": "string",
            "description": "The time and date of the last modification of this profile."
          },
          "lastUserModifier": {
            "type": "string",
            "description": "The last user who modified this profile."
          },
          "rules": {
            "type": "array",
            "description": "Rules configured within this profile.",
            "items": {
              "$ref": "#/components/schemas/FIMRuleResponse"
            }
          }
        }
      },
      "FIMRuleResponse": {
        "title": "FIMRuleResponse",
        "required": [
          "id",
          "ruleName",
          "operatingSystems",
          "eventTypes",
          "attributes"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The rule id.",
            "format": "int64"
          },
          "ruleName": {
            "type": "string",
            "description": "The rule name."
          },
          "operatingSystems": {
            "type": "string",
            "description": "The rule's enabled operating system."
          },
          "eventTypes": {
            "type": "array",
            "description": "The list of File Integrity event types (identifiers) covered\nby this rule.",
            "items": {
              "type": "string"
            }
          },
          "attributes": {
            "type": "array",
            "description": "The list of rule attributes (identifiers) defining this\nrule.",
            "items": {
              "$ref": "#/components/schemas/RuleAttributeDtoItem"
            }
          }
        }
      },
      "CreateFileIntegrityProfileRequest": {
        "title": "FileIntegrityProfileResponse",
        "required": [
          "profileName",
          "enabled",
          "lastDateModified",
          "lastUserModifier",
          "rules"
        ],
        "type": "object",
        "properties": {
          "profileName": {
            "type": "string",
            "description": "The profile name"
          },
          "state": {
            "type": "boolean",
            "description": "Is the profile enabled or disabled. Ture is Enabled.",
            "example": true
          },
          "lastDateModified": {
            "type": "string",
            "description": "The time and date of the last modification of this profile."
          },
          "lastUserModifier": {
            "type": "string",
            "description": "The last user who modified this profile."
          },
          "rules": {
            "type": "array",
            "description": "Rules configured within this profile.",
            "items": {
              "$ref": "#/components/schemas/CreateFIMRuleRequest"
            }
          }
        }
      },
      "CreateFIMRuleRequest": {
        "title": "FIMRuleResponse",
        "required": [
          "ruleName",
          "operatingSystems",
          "eventTypes",
          "attributes"
        ],
        "type": "object",
        "properties": {
          "ruleName": {
            "type": "string",
            "description": "The rule name."
          },
          "operatingSystems": {
            "type": "string",
            "description": "The rule's enabled operating system."
          },
          "eventTypes": {
            "type": "array",
            "description": "The list of File Integrity event types (identifiers) covered\nby this rule.",
            "items": {
              "type": "string"
            }
          },
          "attributes": {
            "type": "array",
            "description": "The list of rule attributes (identifiers) defining this\nrule.",
            "items": {
              "$ref": "#/components/schemas/RuleAttributeDtoItem"
            }
          }
        }
      },
      "UpdateFileIntegrityProfileRequest": {
        "title": "FileIntegrityProfileResponse",
        "required": [
          "profileName",
          "state",
          "lastDateModified",
          "lastUserModifier",
          "rules"
        ],
        "type": "object",
        "properties": {
          "profileName": {
            "type": "string",
            "description": "The profile name"
          },
          "state": {
            "type": "boolean",
            "description": "Is the profile enabled or disabled. Ture is Enabled.",
            "example": true
          },
          "lastDateModified": {
            "type": "string",
            "description": "The time and date of the last modification of this profile."
          },
          "lastUserModifier": {
            "type": "string",
            "description": "The last user who modified this profile."
          },
          "rules": {
            "type": "array",
            "description": "Rules configured within this profile.",
            "items": {
              "$ref": "#/components/schemas/UpdateFIMRuleRequest"
            }
          }
        }
      },
      "UpdateFIMRuleRequest": {
        "title": "FIMRuleResponse",
        "required": [
          "ruleName",
          "operatingSystems",
          "eventTypes",
          "attributes"
        ],
        "type": "object",
        "properties": {
          "ruleName": {
            "type": "string",
            "description": "The rule name."
          },
          "operatingSystems": {
            "type": "string",
            "description": "The rule's enabled operating system."
          },
          "eventTypes": {
            "type": "array",
            "description": "The list of File Integrity event types (identifiers) covered\nby this rule.",
            "items": {
              "type": "string"
            }
          },
          "attributes": {
            "type": "array",
            "description": "The list of rule attributes (identifiers) defining this\nrule.",
            "items": {
              "$ref": "#/components/schemas/RuleAttributeDtoItem"
            }
          }
        }
      },
      "PostLoginRequest": {
        "title": "PostLoginRequest",
        "required": [
          "userName",
          "password",
          "mfaCode"
        ],
        "type": "object",
        "properties": {
          "userName": {
            "type": "string",
            "description": "login user name"
          },
          "password": {
            "type": "string",
            "description": "password"
          },
          "mfaCode": {
            "type": "string",
            "description": "MFA code"
          }
        }
      },
      "UpdateLdapRequest": {
        "title": "UpdateLdapRequest",
        "required": [
          "enabled",
          "jumpBox",
          "directoryType",
          "serverHost",
          "severityLevel",
          "bindUserDn",
          "bindPassword",
          "baseDn",
          "tfaEnabled"
        ],
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Indicates whether the LDAP configuration is enabled",
            "example": false
          },
          "jumpBox": {
            "type": "string",
            "description": "Jump box"
          },
          "directoryType": {
            "type": "string",
            "description": "Directory Type. Active Directory or OpenLDAP"
          },
          "serverHost": {
            "type": "string",
            "description": "The server host"
          },
          "severityLevel": {
            "type": "string",
            "description": "The severity Level. None, SSL or TSL."
          },
          "bindUserDn": {
            "type": "string",
            "description": "Bind user DN"
          },
          "bindPassword": {
            "type": "string",
            "description": "Bind Password"
          },
          "baseDn": {
            "type": "string",
            "description": "Base DN"
          },
          "userGroupName": {
            "type": "string",
            "description": "User group name"
          },
          "localAdminGroupName": {
            "type": "string",
            "description": "Local admin group name"
          },
          "adminGroupName": {
            "type": "string",
            "description": "Admin group name"
          },
          "apiGroupName": {
            "type": "string",
            "description": "Api group name"
          },
          "tfaEnabled": {
            "type": "boolean",
            "description": "Require two factor authentication for LDAP logins",
            "example": false
          }
        }
      },
      "TestLdapRequest": {
        "title": "TestLdapRequest",
        "required": [
          "jumpBox",
          "directoryType",
          "serverHost",
          "severityLevel",
          "bindUserDn",
          "bindPassword",
          "baseDn"
        ],
        "type": "object",
        "properties": {
          "jumpBox": {
            "type": "string",
            "description": "Jump box"
          },
          "directoryType": {
            "type": "string",
            "description": "Directory Type. Active Directory or OpenLDAP"
          },
          "serverHost": {
            "type": "string",
            "description": "The server host"
          },
          "severityLevel": {
            "type": "string",
            "description": "The severity Level. None, SSL or TSL."
          },
          "bindUserDn": {
            "type": "string",
            "description": "Bind user DN"
          },
          "bindPassword": {
            "type": "string",
            "description": "Bind Password"
          },
          "baseDn": {
            "type": "string",
            "description": "Base DN"
          }
        }
      },
      "TestLdapResponse": {
        "title": "TestLdapResponse",
        "required": [
          "testResult"
        ],
        "type": "object",
        "properties": {
          "testResult": {
            "type": "string",
            "description": "The test result"
          }
        }
      },
      "LdapGroupsDtoItem": {
        "title": "LdapGroupsDtoItem",
        "required": [
          "group",
          "roles",
          "restApi"
        ],
        "type": "object",
        "properties": {
          "group": {
            "type": "string",
            "description": "The group name."
          },
          "roles": {
            "type": "string",
            "description": "Specifies the roles of the user",
            "items": {
              "enum": [
                "Admin",
                "Analyst",
                "IT",
                "Read-Only",
                "Senior Analyst"
              ]
            }
          },
          "restApi": {
            "type": "boolean",
            "description": "Rest API enabled/disabled status.",
            "example": false
          }
        }
      },
      "UpdateExclusionsRequest": {
        "title": "UpdateExclusionsRequest",
        "required": [
          "exclusionListName",
          "exclusions",
          "organizationId"
        ],
        "type": "object",
        "properties": {
          "exclusionListName": {
            "type": "string",
            "description": "Exclusions created in the request will be associated with this\nlist."
          },
          "exclusions": {
            "type": "array",
            "description": "List of exclusions definitions to update.",
            "items": {
              "$ref": "#/components/schemas/ExistingExclusionDtoItem"
            }
          },
          "organizationId": {
            "type": "integer",
            "description": "Specifies the id of a specific organization. The value that you specify here must match exactly",
            "format": "int64"
          }
        }
      },
      "UpdateAgentGroupRequest": {
        "title": "UpdateAgentGroupRequest",
        "type": "object",
        "properties": {
          "agentGroupName": {
            "type": "string",
            "description": "New Agent Group name"
          },
          "agentIds": {
            "type": "array",
            "description": "List of agents to update.",
            "items": {
              "type": "integer"
            }
          },
          "policies": {
            "type": "array",
            "description": "list of policies associated with the agent group",
            "items": {
              "$ref": "#/components/schemas/PutAgentGroupsPoliciesRequest"
            }
          }
        }
      },
      "ExistingExclusionDtoItem": {
        "title": "ExistingExclusionDtoItem",
        "required": [
          "attributes",
          "enabled",
          "eventTypes",
          "exclusionId",
          "operatingSystems"
        ],
        "type": "object",
        "properties": {
          "attributes": {
            "type": "array",
            "description": "The list of exclusion attributes (identifiers) defining this\nexclusion.",
            "items": {
              "$ref": "#/components/schemas/RuleAttributeDtoItem"
            }
          },
          "comments": {
            "type": "string",
            "description": "The exclusion's comments."
          },
          "enabled": {
            "type": "boolean",
            "description": "Exclusion enabled/disabled status.",
            "example": false
          },
          "eventTypes": {
            "type": "array",
            "description": "The list of File Integrity Monitoring types (identifiers) covered\nby this exclusion.",
            "items": {
              "type": "string"
            }
          },
          "exclusionId": {
            "type": "integer",
            "description": "The exclusion's Id",
            "format": "int64"
          },
          "operatingSystems": {
            "type": "string",
            "description": "The exclusion's enabled operating system."
          }
        }
      },
      "InputStream": {
        "title": "InputStream",
        "type": "object"
      },
      "OutputStream": {
        "title": "OutputStream",
        "type": "object"
      },
      "PostEndpointUserRequest": {
        "title": "PostEndpointRequest",
        "required": [
          "userName",
          "userGroupId"
        ],
        "type": "object",
        "properties": {
          "userName": {
            "type": "string",
            "description": "Endpoint user name"
          },
          "userGroupId": {
            "type": "integer",
            "description": "Endpoint user Group id",
            "format": "int64"
          }
        }
      },
      "GetEndpointUserGroupResponse": {
        "title": "GetEndpointUserGroupResponse",
        "required": [
          "groupId",
          "groupName"
        ],
        "type": "object",
        "properties": {
          "groupId": {
            "type": "integer",
            "description": "Endpoint user group id",
            "format": "int64"
          },
          "groupName": {
            "type": "string",
            "description": "Endpoint user group name"
          },
          "users": {
            "type": "array",
            "description": "Endpoint users",
            "items": {
              "$ref": "#/components/schemas/EndpointUserResponse"
            }
          }
        }
      },
      "EndpointUserResponse": {
        "title": "EndpointUserResponse",
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "description": "Endpoint user id",
            "format": "int64"
          },
          "userName": {
            "type": "string",
            "description": "Endpoint user name"
          }
        }
      },
      "UpdateEndpointUserGroupRequest": {
        "title": "UpdateEndpointUserGroupRequest",
        "required": [
          "groupName",
          "endpointUserIds"
        ],
        "type": "object",
        "properties": {
          "groupName": {
            "type": "string",
            "description": "Endpoint user group name"
          },
          "endpointUserIds": {
            "type": "array",
            "description": "Endpoint User Ids",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          }
        }
      },
      "PostEndpointUserGroupRequest": {
        "title": "PostEndpointUserGroupRequest",
        "required": [
          "groupName"
        ],
        "type": "object",
        "properties": {
          "groupName": {
            "type": "string",
            "description": "Endpoint user group name"
          },
          "endpointUserIds": {
            "type": "array",
            "description": "Endpoint User Ids",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          }
        }
      },
      "PostCreateUserRequest": {
        "title": "PostCreateUserRequest",
        "required": [
          "username",
          "email",
          "password",
          "role",
          "restApi",
          "tfaEnabled",
          "changePassword"
        ],
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "Specifies the login username of the user"
          },
          "title": {
            "type": "string",
            "description": "Specifies the title of user"
          },
          "firstName": {
            "type": "string",
            "description": "Specifies the first name of user"
          },
          "lastName": {
            "type": "string",
            "description": "Specifies the last name of user"
          },
          "email": {
            "type": "string",
            "description": "Specifies the email of user"
          },
          "password": {
            "type": "string",
            "description": "Specifies the login password"
          },
          "role": {
            "type": "string",
            "description": "Specifies the role of the user"
          },
          "restApi": {
            "type": "boolean",
            "description": "Rest API enabled/disabled status.",
            "example": false
          },
          "tfaEnabled": {
            "type": "boolean",
            "description": "Require two factor authentication for LDAP logins",
            "example": true
          },
          "changePassword": {
            "type": "boolean",
            "description": "Require a change of password in the next sign in",
            "example": false
          }
        }
      },
      "PostCreateUserResponse": {
        "title": "PostCreateUserResponse",
        "required": [
          "userId"
        ],
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "description": "Specifies the user ID",
            "format": "int64"
          }
        }
      },
      "GetUserResponse": {
        "title": "GetUserResponse",
        "required": [
          "userId",
          "username",
          "email",
          "password",
          "role",
          "restApi",
          "tfaEnabled",
          "changePassword"
        ],
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "description": "Specifies the local user ID",
            "format": "int64"
          },
          "username": {
            "type": "string",
            "description": "Specifies the login username of the user"
          },
          "title": {
            "type": "string",
            "description": "Specifies the title of user"
          },
          "firstName": {
            "type": "string",
            "description": "Specifies the first name of user"
          },
          "lastName": {
            "type": "string",
            "description": "Specifies the last name of user"
          },
          "email": {
            "type": "string",
            "description": "Specifies the email of user"
          },
          "password": {
            "type": "string",
            "description": "Specifies the login password"
          },
          "role": {
            "type": "string",
            "description": "Specifies the role of the user"
          },
          "restApi": {
            "type": "boolean",
            "description": "Rest API enabled/disabled status.",
            "example": false
          },
          "tfaEnabled": {
            "type": "boolean",
            "description": "Require two factor authentication for LDAP logins",
            "example": true
          },
          "changePassword": {
            "type": "boolean",
            "description": "Require a change of password in the next sign in",
            "example": false
          }
        }
      },
      "PatchUserRequest": {
        "title": "PatchUserRequest",
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "Specifies the login username of the user"
          },
          "title": {
            "type": "string",
            "description": "Specifies the title of user"
          },
          "firstName": {
            "type": "string",
            "description": "Specifies the first name of user"
          },
          "lastName": {
            "type": "string",
            "description": "Specifies the last name of user"
          },
          "email": {
            "type": "string",
            "description": "Specifies the email of user"
          },
          "password": {
            "type": "string",
            "description": "Specifies the login password"
          },
          "role": {
            "type": "string",
            "description": "Specifies the role of the user"
          },
          "restApi": {
            "type": "boolean",
            "description": "Rest API enabled/disabled status.",
            "example": false
          },
          "tfaEnabled": {
            "type": "boolean",
            "description": "Require two factor authentication for LDAP logins",
            "example": true
          },
          "changePassword": {
            "type": "boolean",
            "description": "Require a change of password in the next sign in",
            "example": false
          }
        }
      },
      "PatchUserResponse": {
        "title": "PatchUserResponse",
        "required": [
          "userId",
          "username",
          "email",
          "role",
          "restApi",
          "tfaEnabled",
          "changePassword"
        ],
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "description": "Specifies the local user ID",
            "format": "int64"
          },
          "username": {
            "type": "string",
            "description": "Specifies the login username of the user"
          },
          "title": {
            "type": "string",
            "description": "Specifies the title of user"
          },
          "firstName": {
            "type": "string",
            "description": "Specifies the first name of user"
          },
          "lastName": {
            "type": "string",
            "description": "Specifies the last name of user"
          },
          "email": {
            "type": "string",
            "description": "Specifies the email of user"
          },
          "role": {
            "type": "string",
            "description": "Specifies the role of the user"
          },
          "restApi": {
            "type": "boolean",
            "description": "Rest API enabled/disabled status.",
            "example": false
          },
          "tfaEnabled": {
            "type": "boolean",
            "description": "Require two factor authentication for LDAP logins",
            "example": true
          },
          "changePassword": {
            "type": "boolean",
            "description": "Require a change of password in the next sign in",
            "example": false
          }
        }
      },
      "PutUserAuthenticationRequest": {
        "title": "PutUserAuthenticationRequest",
        "required": [
          "password"
        ],
        "type": "object",
        "properties": {
          "password": {
            "type": "string",
            "description": "Specifies the login password"
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}